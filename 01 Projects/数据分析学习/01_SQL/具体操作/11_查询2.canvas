{
	"nodes":[
		{"id":"overview","type":"text","text":"## WHERE子句概述\n\n### 基本作用\n- **核心功能**：筛选满足条件的记录\n- **语法位置**：跟在FROM子句后面\n- **工作原理**：逐行检查每条记录是否满足条件\n\n### 支持的运算符类型\n1. **比较运算符**：`>`, `<`, `=`, `!=`, `>=`, `<=`\n2. **范围运算符**：`BETWEEN...AND`\n3. **值判断运算符**：`IN`, `NOT IN`\n4. **模糊匹配**：`LIKE`\n5. **正则表达式**：`REGEXP`\n6. **逻辑运算符**：`AND`, `OR`, `NOT`\n\n### 通俗理解\n**WHERE就像一个筛子，帮你从大量数据中找出符合条件的记录**","x":100,"y":-20,"width":500,"height":400,"color":"2"},
		{"id":"regexp_advanced","type":"text","text":"## 正则表达式高级匹配\n\n### 为什么需要正则表达式？\n- **LIKE功能有限**：只有%和_两个通配符\n- **复杂模式**：需要更灵活的匹配规则\n- **强大功能**：支持各种特殊字符和模式\n\n### 基本语法\n```sql\n-- 基本格式\nSELECT * FROM emp WHERE name REGEXP '正则表达式';\n```\n\n### 常用正则表达式\n\n#### 1. 位置匹配\n```sql\n-- 以B开头（^表示开始）\nSELECT * FROM emp WHERE name REGEXP '^B';\n\n-- 以N结尾（$表示结束）\nSELECT * FROM emp WHERE name REGEXP 'N$';\n```\n\n#### 2. 字符集匹配\n```sql\n-- 匹配DA开头，AE结尾，中间是B或N\nSELECT * FROM emp WHERE name REGEXP '^DA[BN]AE$';\n```\n\n#### 3. 任意字符匹配\n```sql\n-- 包含B（.表示任意字符，*表示0个或多个）\nSELECT * FROM emp WHERE name REGEXP '.*B.*';\n```\n\n### 通俗理解\n**正则表达式就像一个超级智能的搜索工具，能识别各种复杂的文字模式**","x":100,"y":450,"width":500,"height":380,"color":"5"},
		{"id":"logical_operators","type":"text","text":"## 逻辑运算符详解\n\n### 三大逻辑运算符\n1. **AND（与）**：所有条件都必须满足\n2. **OR（或）**：满足任意一个条件即可\n3. **NOT（非）**：取反，不满足条件的\n\n### AND运算符实例\n```sql\n-- 查询教学部的所有男老师\nSELECT * FROM emp \nWHERE dep = '教学部' AND gender = 'male';\n\n-- 查询姓名以A开头且工资大于1万的员工\nSELECT * FROM emp \nWHERE name LIKE 'A%' AND salary > 10000;\n```\n\n### OR运算符实例\n```sql\n-- 查询年龄小于25岁或工资低于1万的员工（弱势群体）\nSELECT * FROM emp \nWHERE age < 25 OR salary < 10000;\n```\n\n### NOT运算符实例\n```sql\n-- 查询教学部的非男老师（即女老师）\nSELECT * FROM emp \nWHERE dep = '教学部' AND NOT gender = 'male';\n```\n\n### 逻辑运算优先级\n1. **NOT** 优先级最高\n2. **AND** 次之\n3. **OR** 优先级最低\n\n### 通俗理解\n**逻辑运算符就像日常说话：'既要...又要...'（AND），'要么...要么...'（OR），'不是...'（NOT）**","x":1100,"y":450,"width":450,"height":380,"color":"1"},
		{"id":"practical_examples","type":"text","text":"## 实际应用案例\n\n### 案例1：人事查询\n```sql\n-- 查询教学部的所有男老师信息\nSELECT * FROM emp \nWHERE dep = '教学部' AND gender = 'male';\n```\n**分析**：需要同时满足部门和性别两个条件\n\n### 案例2：薪资分析\n```sql\n-- 查询姓名以A开头并且工资大于1万的员工姓名\nSELECT name FROM emp \nWHERE name LIKE 'A%' AND salary > 10000;\n```\n**分析**：结合模糊匹配和数值比较\n\n### 案例3：弱势群体统计\n```sql\n-- 查询年龄小于25岁或工资低于1万的员工\nSELECT * FROM emp \nWHERE age < 25 OR salary < 10000;\n```\n**分析**：满足任一条件即可，体现OR的特点\n\n### 案例4：复杂正则匹配\n```sql\n-- 查询姓名符合特定模式的员工\nSELECT * FROM emp \nWHERE name REGEXP '^DA[BN]AE$';\n```\n**分析**：DA开头，AE结尾，中间是B或N\n\n### 通俗理解\n**实际应用就是把各种技巧组合起来，解决真实的业务问题**","x":100,"y":900,"width":500,"height":350,"color":"2"},
		{"id":"syntax_summary","type":"text","text":"## 语法要点总结\n\n### 1. 字符串处理注意事项\n```sql\n-- 推荐使用单引号（避免编辑器飘红）\nSELECT * FROM emp WHERE name = '张三';\n\n-- 双引号也可以，但可能在某些编辑器中显示异常\nSELECT * FROM emp WHERE name = \"张三\";\n```\n\n### 2. 运算符优先级\n- **比较运算符**：=, !=, >, <, >=, <=\n- **LIKE/REGEXP**：模糊匹配\n- **NOT**：取反（优先级最高）\n- **AND**：与运算（优先级中等）\n- **OR**：或运算（优先级最低）\n\n### 3. 常见错误\n```sql\n-- 错误：使用双等号\nWHERE name == '张三'  -- 这是Python语法\n\n-- 正确：使用单等号\nWHERE name = '张三'   -- 这是SQL语法\n```\n\n### 4. 性能提示\n- **索引字段**：在WHERE中使用索引字段查询更快\n- **避免函数**：WHERE子句中避免对字段使用函数\n- **精确匹配优先**：能用=就不用LIKE\n\n### 通俗理解\n**掌握语法细节，避免常见陷阱，写出高效的查询语句**","x":650,"y":900,"width":400,"height":350,"color":"3"},
		{"id":"advanced_tips","type":"text","text":"## 高级技巧与最佳实践\n\n### 1. 复合条件的括号使用\n```sql\n-- 明确优先级\nSELECT * FROM emp \nWHERE (age < 25 OR salary < 5000) AND dep = '技术部';\n```\n\n### 2. NULL值处理\n```sql\n-- 查找空值\nSELECT * FROM emp WHERE email IS NULL;\n\n-- 查找非空值\nSELECT * FROM emp WHERE email IS NOT NULL;\n```\n\n### 3. 字符串函数结合\n```sql\n-- 使用REGEXP_LIKE函数进行大小写敏感匹配\nSELECT * FROM emp \nWHERE REGEXP_LIKE(name, '^[A-Z].*', 'c');\n```\n\n### 4. 性能优化建议\n- **索引利用**：WHERE条件中的字段建立索引\n- **条件顺序**：把筛选性强的条件放在前面\n- **避免通配符开头**：`LIKE '%ABC'`无法使用索引\n\n### 5. 调试技巧\n```sql\n-- 分步骤验证复杂条件\n-- 第一步：验证单个条件\nSELECT COUNT(*) FROM emp WHERE dep = '技术部';\n-- 第二步：添加第二个条件\nSELECT COUNT(*) FROM emp WHERE dep = '技术部' AND age > 30;\n```\n\n### 通俗理解\n**高级技巧就像武林秘籍，让你的SQL查询更准确、更快速、更优雅**","x":1100,"y":900,"width":450,"height":350,"color":"4"},
		{"id":"case_sensitivity","type":"text","text":"## 大小写敏感性控制\n\n### 默认行为\n- **LIKE和REGEXP**：默认不区分大小写\n- **问题**：有时需要精确区分大小写\n\n### 解决方案：REGEXP_LIKE函数\n```sql\n-- 不区分大小写（默认）\nSELECT * FROM emp WHERE REGEXP_LIKE(name, '.*B.*');\n\n-- 区分大小写（添加'c'参数）\nSELECT * FROM emp WHERE REGEXP_LIKE(name, '.*B.*', 'c');\n```\n\n### 实际效果对比\n```sql\n-- 这个会找到所有包含B或b的\nSELECT * FROM emp WHERE REGEXP_LIKE(name, '.*B.*');\n\n-- 这个只找包含大写B的\nSELECT * FROM emp WHERE REGEXP_LIKE(name, '.*B.*', 'c');\n```\n\n### 通俗理解\n**就像戴眼镜看东西，不戴眼镜看不清大小写，戴上眼镜（加参数）就能区分清楚**","x":650,"y":450,"width":400,"height":390,"color":"6"},
		{"id":"next_steps","type":"text","text":"## 下一步学习方向\n\n### 即将学习的内容\n1. **ORDER BY**：结果排序\n2. **GROUP BY**：分组统计\n3. **HAVING**：分组条件筛选\n4. **JOIN**：多表连接查询\n5. **子查询**：嵌套查询\n6. **函数应用**：内置函数的使用\n\n### 练习建议\n- 多写不同类型的WHERE条件\n- 尝试组合多个运算符\n- 理解每种运算符的使用场景\n- 注意SQL语法的细节差异\n\n### 通俗理解\n**WHERE子句是SQL查询的基础，掌握它就像学会了数据库查询的基本功**","x":650,"y":1320,"width":400,"height":400,"color":"5"},
		{"id":"like_pattern_matching","type":"text","text":"## LIKE模糊匹配详解\n\n### 为什么需要模糊匹配？\n- **精确匹配限制**：`name = '鲍勃'` 只能找到完全匹配的\n- **实际需求**：经常需要找\"以某字母开头的\"、\"包含某字符的\"\n\n### 通配符详解\n\n#### 1. 百分号（%）- 匹配任意多个字符\n```sql\n-- 查找以B开头的姓名\nSELECT * FROM emp WHERE name LIKE 'B%';\n\n-- 查找以B结尾的姓名\nSELECT * FROM emp WHERE name LIKE '%B';\n\n-- 查找包含B的姓名\nSELECT * FROM emp WHERE name LIKE '%B%';\n```\n\n#### 2. 下划线（_）- 只匹配一个字符\n```sql\n-- 查找B开头，第二个字符任意的两字符姓名\nSELECT * FROM emp WHERE name LIKE 'B_';\n```\n\n### 重要特点\n- **不区分大小写**：默认情况下'B'和'b'是一样的\n- **灵活性**：%可以匹配0个或多个字符\n- **精确性**：_必须匹配恰好一个字符\n\n### 通俗理解\n**LIKE就像搜索引擎，%是万能钥匙，_是精确钥匙**","x":1100,"y":-20,"width":450,"height":400,"color":"4"},
		{"id":"comparison_operators","type":"text","text":"## 比较运算符详解\n\n### 基本比较运算符\n```sql\n-- 大于\nSELECT * FROM emp WHERE salary > 10000;\n\n-- 小于\nSELECT * FROM emp WHERE age < 25;\n\n-- 等于（注意：SQL中用单个=）\nSELECT * FROM emp WHERE name = '鲍勃';\n\n-- 不等于\nSELECT * FROM emp WHERE gender != 'male';\n```\n\n### BETWEEN...AND 范围查询\n```sql\n-- 查询年龄在25到35之间的员工\nSELECT * FROM emp WHERE age BETWEEN 25 AND 35;\n```\n\n### IN 值判断\n```sql\n-- 查询部门为教学部或研发部的员工\nSELECT * FROM emp WHERE dep IN ('教学部', '研发部');\n```\n\n### 通俗理解\n**比较运算符就像日常生活中的比较：比谁高、比谁年轻、看谁符合条件**","x":650,"y":-20,"width":400,"height":400,"color":"3"},
		{"id":"title","type":"text","text":"# MySQL从基础到进阶：WHERE子句详解\n\n**苑昊老师** | 2024-12-18\n\n[视频链接](https://www.bilibili.com/video/BV1mxrfYsEyP/)\n\n## 学习目标：掌握WHERE子句的各种查询技巧","x":400,"y":-360,"width":600,"height":120,"color":"1"},
		{"id":"10fcfcf5fbcc1912","type":"file","file":"00-Obsidian/附件/Pasted image 20250609110132.png","x":-1234,"y":-1920,"width":891,"height":727},
		{"id":"2766babdd30f8eb7","type":"file","file":"00-Obsidian/附件/Pasted image 20250609110157.png","x":-3680,"y":-1056,"width":2931,"height":1036},
		{"id":"531168fd0e9cd384","type":"text","text":"正则表达式的使用还没会","x":-2389,"y":360,"width":349,"height":71,"color":"3"}
	],
	"edges":[
		{"id":"edge1","fromNode":"title","fromSide":"bottom","toNode":"overview","toSide":"right","color":"2"},
		{"id":"edge2","fromNode":"overview","fromSide":"right","toNode":"comparison_operators","toSide":"left","color":"3"},
		{"id":"edge3","fromNode":"comparison_operators","fromSide":"right","toNode":"like_pattern_matching","toSide":"left","color":"4"},
		{"id":"edge4","fromNode":"like_pattern_matching","fromSide":"left","toNode":"regexp_advanced","toSide":"right","color":"5"},
		{"id":"edge5","fromNode":"regexp_advanced","fromSide":"right","toNode":"case_sensitivity","toSide":"left","color":"6"},
		{"id":"edge6","fromNode":"case_sensitivity","fromSide":"right","toNode":"logical_operators","toSide":"left","color":"1"},
		{"id":"edge7","fromNode":"logical_operators","fromSide":"left","toNode":"practical_examples","toSide":"right","color":"2"},
		{"id":"edge8","fromNode":"practical_examples","fromSide":"right","toNode":"syntax_summary","toSide":"left","color":"3"},
		{"id":"edge9","fromNode":"syntax_summary","fromSide":"right","toNode":"advanced_tips","toSide":"left","color":"4"},
		{"id":"edge10","fromNode":"advanced_tips","fromSide":"left","toNode":"next_steps","toSide":"right","color":"5"},
		{"id":"edge11","fromNode":"overview","fromSide":"right","toNode":"like_pattern_matching","toSide":"left","color":"2"},
		{"id":"edge12","fromNode":"comparison_operators","fromSide":"right","toNode":"logical_operators","toSide":"left","color":"3"},
		{"id":"984ab822a5f3c108","fromNode":"10fcfcf5fbcc1912","fromSide":"right","toNode":"title","toSide":"left"},
		{"id":"eeb32732bbe41f54","fromNode":"2766babdd30f8eb7","fromSide":"right","toNode":"title","toSide":"left"},
		{"id":"cf6fb97da42e0160","fromNode":"2766babdd30f8eb7","fromSide":"bottom","toNode":"531168fd0e9cd384","toSide":"top"}
	]
}
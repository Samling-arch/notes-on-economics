{
	"nodes":[
		{"id":"problem_intro","type":"text","text":"## 问题引入：批量插入的挑战\n\n### 场景设定\n- 需要插入 **$100$ 条**记录到student表\n- 当前表有 **$6$ 条**现有记录\n- 目标：高效批量添加数据\n\n### 核心问题\n**如何在不使用特殊语法的情况下实现批量插入？**\n\n### 直观想法\n- 写$100$个INSERT语句\n- 每个语句插入一条记录\n- **但这样做会有严重性能问题！**","x":100,"y":100,"width":350,"height":250,"color":"2"},
		{"id":"naive_approach","type":"text","text":"## 错误方法：多条INSERT语句\n\n### 代码示例\n```sql\nINSERT INTO student (age, name) VALUES (28, 'rain');\nINSERT INTO student (age, name) VALUES (28, 'rain');\nINSERT INTO student (age, name) VALUES (28, 'rain');\n-- 重复100次...\n```\n\n### 性能分析\n- **单条执行时间**：约 $2-7$ ms\n- **总执行时间**：$100 \\times 3$ ms = $300$ ms\n- **数据库连接次数**：$100$ 次\n\n### 问题根源\n**每次INSERT都要重新连接数据库表，造成大量时间浪费在\"撞表\"操作上**","x":500,"y":100,"width":400,"height":300,"color":"3"},
		{"id":"performance_demo","type":"text","text":"## 性能对比演示\n\n### 多条INSERT的问题\n- **执行过程**：需要等待转圈（卡顿）\n- **时间消耗**：每条$2-7$ms，累加效应明显\n- **资源浪费**：重复的数据库连接开销\n\n### 数学计算\n$$总时间 = 单次时间 \\times 插入次数$$\n$$= 3ms \\times 100 = 300ms$$\n\n### 扩展思考\n- 如果是 **$1000$ 条**记录呢？\n- 如果是 **$10000$ 条**记录呢？\n- 时间复杂度：$$O(n)$$，线性增长","x":950,"y":100,"width":380,"height":280,"color":"4"},
		{"id":"correct_approach","type":"text","text":"## 正确方法：单条INSERT批量VALUES\n\n### 语法结构\n```sql\nINSERT INTO student (age, name) VALUES \n  (28, 'rain'),\n  (28, 'rain'),\n  (28, 'rain'),\n  -- ...\n  (28, 'rain');  -- 最后一个用分号\n```\n\n### 核心改变\n1. **分号→逗号**：将结束符改为分隔符\n2. **批量VALUES**：多个值组放在一个语句中\n3. **最后分号**：整个语句的结束标记\n\n### 语法原理\n**一次性连接数据库，批量插入所有记录，避免重复连接开销**","x":100,"y":450,"width":400,"height":350,"color":"5"},
		{"id":"performance_improvement","type":"text","text":"## 性能提升分析\n\n### 优化后的表现\n- **执行时间**：仅$18$ms（瞬间完成）\n- **数据库连接**：只需$1$次\n- **性能比较**：$$\\frac{300ms}{18ms} ≈ 16.7倍$$提升\n\n### 时间复杂度分析\n- **错误方法**：$$O(n)$$ 线性增长\n- **正确方法**：$$O(1)$$ 常数时间（相对于连接次数）\n\n### 扩展效果\n- $1000$条：$3000$ms → $~20$ms\n- $10000$条：$30000$ms → $~30$ms","x":550,"y":450,"width":380,"height":300,"color":"6"},
		{"id":"syntax_details","type":"text","text":"## 语法细节解析\n\n### 标点符号的作用\n- **逗号(,)**：VALUES之间的分隔符\n- **分号(;)**：整个SQL语句的结束符\n\n### 记录格式\n```sql\n(值1, 值2, ...)  -- 一条记录\n```\n\n### 完整结构\n```sql\nINSERT INTO 表名 (字段列表) VALUES\n  (记录1),\n  (记录2),\n  (记录N);  -- 注意最后是分号\n```\n\n### 注意事项\n**每个括号代表一条完整记录，字段顺序要与定义保持一致**","x":980,"y":450,"width":350,"height":280,"color":"2"},
		{"id":"insert_set_method","type":"text","text":"## 第二种方法：INSERT SET语法\n\n### 基本语法\n```sql\nINSERT SET \n  字段1 = 值1,\n  字段2 = 值2,\n  字段3 = 值3;\n```\n\n### 实际示例\n```sql\nINSERT student SET \n  name = '愿',\n  age = 28;\n```\n\n### 语法特点\n- **直观性强**：字段名和值直接对应\n- **顺序灵活**：字段顺序可以任意调整\n- **可读性好**：类似赋值语句的写法","x":100,"y":850,"width":400,"height":300,"color":"3"},
		{"id":"method_comparison","type":"text","text":"## 两种方法对比分析\n\n### INSERT VALUES方法\n- **优点**：支持批量插入，性能优越\n- **缺点**：位置映射，需要记住字段顺序\n- **使用场景**：批量数据导入\n\n### INSERT SET方法\n- **优点**：直观易读，字段名清晰\n- **缺点**：只能单条插入\n- **使用场景**：单条记录添加\n\n### 使用建议\n**INSERT VALUES使用更普遍，特别是在批量操作中**","x":550,"y":850,"width":400,"height":300,"color":"4"},
		{"id":"core_principles","type":"text","text":"## 核心优化原理\n\n### 数据库连接开销\n- **连接建立时间**\n- **表查找时间**\n- **权限验证时间**\n\n### 批量操作优势\n$$效率提升 = \\frac{n \\times 连接开销}{1 \\times 连接开销} = n倍$$\n\n### 实际应用原则\n**在生产环境中，批量操作是必需的性能优化手段**","x":1000,"y":850,"width":350,"height":250,"color":"5"},
		{"id":"practical_tips","type":"text","text":"## 实际应用建议\n\n### 项目开发中的应用\n- **数据迁移**：大量历史数据导入\n- **批量注册**：用户批量导入系统\n- **数据同步**：定时任务批量更新\n\n### 性能优化策略\n1. **永远不要**在循环中执行INSERT\n2. **优先使用**批量INSERT VALUES\n3. **合理控制**单次批量大小（避免内存溢出）\n\n### 经验法则\n**单次批量控制在1000-5000条记录之间效果最佳**","x":100,"y":1200,"width":400,"height":250,"color":"6"},
		{"id":"auto_increment_notes","type":"text","text":"## 自增ID机制说明\n\n### 自增特性\n- **连续递增**：即使删除记录，ID继续递增\n- **不会重复**：保证唯一性\n- **删除后保留**：删除ID=$9$的记录，下一个仍是ID=$10$\n\n### 实际表现\n```\n插入前最大ID: 9\n删除ID=9的记录\n新插入记录ID: 10 (不是9)\n```\n\n**这是数据库保证数据完整性的重要机制**","x":550,"y":1200,"width":380,"height":220,"color":"2"},
		{"id":"summary_and_next","type":"text","text":"## 总结与预告\n\n### 本节课重点\n1. **批量插入**的两种方法\n2. **性能优化**的重要性\n3. **INSERT VALUES** vs **INSERT SET**\n\n### 性能提升数据\n- 时间节省：$16.7$倍\n- 连接减少：$100$倍→$1$倍\n- 操作效率：显著提升\n\n### 下节课预告\n**学习MySQL最核心的查询记录操作**","x":980,"y":1200,"width":350,"height":220,"color":"1"},
		{"id":"title","type":"text","text":"# MySQL从基础到进阶：批量插入详解\n\n**第二讲** | 苑昊老师 | 2024-12-18\n\n[视频链接](https://www.bilibili.com/video/BV1mxrfYsEyP/)\n\n**核心主题：从单条插入到批量插入的性能优化之路**","x":300,"y":-100,"width":600,"height":120,"color":"1"},
		{"id":"a67569e661ac9f9e","x":1034,"y":-84,"width":632,"height":88,"type":"text","text":"insert students (name) value ( \"yuan\"),\n\t\t\t\t\t\t(\"lin\");"}
	],
	"edges":[
		{"id":"edge1","fromNode":"title","fromSide":"bottom","toNode":"problem_intro","toSide":"right","color":"4"},
		{"id":"edge2","fromNode":"problem_intro","fromSide":"right","toNode":"naive_approach","toSide":"left","color":"2"},
		{"id":"edge3","fromNode":"naive_approach","fromSide":"right","toNode":"performance_demo","toSide":"left","color":"3"},
		{"id":"edge4","fromNode":"performance_demo","fromSide":"left","toNode":"correct_approach","toSide":"right","color":"5"},
		{"id":"edge5","fromNode":"correct_approach","fromSide":"right","toNode":"performance_improvement","toSide":"left","color":"6"},
		{"id":"edge6","fromNode":"performance_improvement","fromSide":"right","toNode":"syntax_details","toSide":"left","color":"2"},
		{"id":"edge7","fromNode":"correct_approach","fromSide":"bottom","toNode":"insert_set_method","toSide":"top","color":"3"},
		{"id":"edge8","fromNode":"insert_set_method","fromSide":"right","toNode":"method_comparison","toSide":"left","color":"4"},
		{"id":"edge9","fromNode":"method_comparison","fromSide":"right","toNode":"core_principles","toSide":"left","color":"5"},
		{"id":"edge10","fromNode":"core_principles","fromSide":"left","toNode":"practical_tips","toSide":"right","color":"6"},
		{"id":"edge11","fromNode":"practical_tips","fromSide":"right","toNode":"auto_increment_notes","toSide":"left","color":"2"},
		{"id":"edge12","fromNode":"auto_increment_notes","fromSide":"right","toNode":"summary_and_next","toSide":"left","color":"1"},
		{"id":"edge13","fromNode":"syntax_details","fromSide":"bottom","toNode":"method_comparison","toSide":"top","color":"4"},
		{"id":"c2fd6dae23f1cad0","fromNode":"title","fromSide":"right","toNode":"a67569e661ac9f9e","toSide":"left"}
	]
}
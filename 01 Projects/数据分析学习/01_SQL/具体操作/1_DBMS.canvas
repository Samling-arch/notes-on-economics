{
	"nodes":[
		{"id":"title","type":"text","text":"# MySQL从基础到进阶：数据库操作完整教程\n\n**第三节课** | 苑昊老师 | 2024-12-18\n\n[视频链接](https://www.bilibili.com/video/BV1mxrfYsEyP/)\n\n**核心概念**：此数据库非彼数据库 - 理解MySQL软件与数据库单元的区别","x":400,"y":-100,"width":600,"height":120,"color":"6"},
		{"id":"concept_foundation","type":"text","text":"## 基础概念理解\n\n### 💡 通俗理解\n**数据库就像文件夹，表就像Excel文件**\n\n### 层级关系\n```\nMySQL软件（管理系统）\n├── 数据库1（项目A的文件夹）\n│   ├── 表1（用户信息.xlsx）\n│   ├── 表2（订单信息.xlsx）\n│   └── 表3（商品信息.xlsx）\n├── 数据库2（项目B的文件夹）\n│   ├── 表4（员工信息.xlsx）\n│   └── 表5（部门信息.xlsx）\n└── 系统数据库\n    ├── information_schema\n    ├── mysql\n    └── performance_schema\n```\n\n### 🎯 学习路径\n1. 先学数据库操作（文件夹管理）\n2. 再学表操作（Excel文件管理）\n3. 最后学记录操作（Excel行数据）","x":50,"y":50,"width":350,"height":280,"color":"1"},
		{"id":"database_query","type":"text","text":"## 数据库查询操作\n\n### 💡 通俗理解\n**查看这栋大楼里有哪些房间（数据库）**\n\n### 基本查询命令\n```sql\nSHOW DATABASES;\n```\n**默认系统数据库**：\n- `information_schema` - 系统信息库\n- `mysql` - MySQL核心配置库\n- `performance_schema` - 性能监控库\n- `sys` - 系统工具库\n\n### 模糊查询技巧\n**完全匹配**：\n```sql\nSHOW DATABASES LIKE 'bingo';\n```\n\n**前缀匹配**：\n```sql\nSHOW DATABASES LIKE 'B%';\n```\n\n**后缀匹配**：\n```sql\nSHOW DATABASES LIKE '%job';\n```\n\n**包含匹配**：\n```sql\nSHOW DATABASES LIKE '%B%';\n```\n\n### 🔍 通配符解释\n- `%` = 匹配任意个数的任意字符（包括0个）\n- 类似正则表达式的概念","x":850,"y":50,"width":400,"height":350,"color":"3"},
		{"id":"database_create","type":"text","text":"## 数据库创建操作\n\n### 💡 通俗理解\n**在大楼里新建一个房间（项目文件夹）**\n\n### 基本创建语法\n```sql\nCREATE DATABASE 数据库名;\n```\n\n### 完整创建语法\n```sql\nCREATE DATABASE [IF NOT EXISTS] 数据库名 \n[CHARACTER SET 编码集];\n```\n\n**示例**：\n```sql\n-- 基本创建\nCREATE DATABASE test;\n\n-- 指定编码创建\nCREATE DATABASE test2 CHARACTER SET utf8;\n\n-- 安全创建（不存在才创建）\nCREATE DATABASE IF NOT EXISTS test2;\n```\n\n### 🚨 编码问题详解\n**为什么要关心编码？**\n- 决定能否存储中文字符\n- `UTF8` - 支持中文（推荐）\n- `GBK` - 支持中文\n- `LATIN1` - 不支持中文（危险）\n\n**编码继承关系**：\n数据库编码 → 表编码 → 字段编码","x":50,"y":400,"width":400,"height":320,"color":"4"},
		{"id":"database_info","type":"text","text":"## 查看数据库详细信息\n\n### 💡 通俗理解\n**查看房间的装修细节和规格**\n\n### 查看创建信息\n```sql\nSHOW CREATE DATABASE 数据库名;\n```\n\n**示例输出**：\n```sql\nSHOW CREATE DATABASE test;\n```\n```\nCREATE DATABASE `test` \n/*!40100 DEFAULT CHARACTER SET utf8 \nCOLLATE utf8_general_ci */;\n```\n\n### 🔍 信息解读\n- `CHARACTER SET utf8` - 字符编码集\n- `COLLATE utf8_general_ci` - 排序规则\n- 反引号 `` ` `` - 标识符保护\n- `/*!40100 ... */` - 版本兼容注释\n\n### 作用\n- 确认编码是否正确\n- 了解数据库的完整配置\n- 调试编码问题的利器","x":500,"y":400,"width":350,"height":280,"color":"5"},
		{"id":"database_modify","type":"text","text":"## 数据库修改操作\n\n### 💡 通俗理解\n**重新装修房间，但不能改房间号（名字）**\n\n### 修改语法\n```sql\nALTER DATABASE 数据库名 \nCHARACTER SET 新编码;\n```\n\n**示例**：\n```sql\nALTER DATABASE test2 \nCHARACTER SET utf8;\n```\n\n### ⚠️ 重要限制\n**不能直接修改的内容**：\n- ❌ 数据库名称\n- ✅ 字符编码集\n- ✅ 排序规则\n\n### 🔄 曲线救国改名法\n1. 创建新名字的数据库\n2. 备份旧数据库数据\n3. 导入到新数据库\n4. 删除旧数据库\n\n### 使用场景\n- 发现编码设置错误\n- 需要支持新的字符集\n- 统一项目编码标准","x":900,"y":400,"width":350,"height":300,"color":"6"},
		{"id":"database_delete","type":"text","text":"## 数据库删除操作\n\n### 💡 通俗理解\n**拆除整个房间，里面所有东西都没了**\n\n### 删除语法\n```sql\nDROP DATABASE 数据库名;\n```\n\n### 安全删除语法\n```sql\nDROP DATABASE IF EXISTS 数据库名;\n```\n\n**区别对比**：\n```sql\n-- 危险删除（数据库不存在会报错）\nDROP DATABASE test;\n\n-- 安全删除（不存在不报错，只警告）\nDROP DATABASE IF EXISTS test;\n```\n\n### 🚨 超级警告\n**DROP操作的特点**：\n- ⚡ 立即执行，无确认提示\n- 💀 数据完全丢失，无法恢复\n- 🔥 包括所有表和表中的所有数据\n- 😭 老师的血泪教训：重要数据误删痛哭\n\n### 💡 安全建议\n1. 删除前三思而后行\n2. 重要数据先备份\n3. 使用 `IF EXISTS` 避免报错\n4. 在测试环境先练习","x":50,"y":750,"width":400,"height":320,"color":"red"},
		{"id":"database_switch","type":"text","text":"## 数据库切换操作\n\n### 💡 通俗理解\n**从大楼门口进入具体房间，开始工作**\n\n### 切换语法\n```sql\nUSE 数据库名;\n```\n\n### 状态检查\n```sql\n-- 查看当前所在数据库\nSELECT DATABASE();\n```\n\n**操作示例**：\n```sql\n-- 初始状态\nSELECT DATABASE(); -- 结果：NULL\n\n-- 切换到test数据库\nUSE test;\n\n-- 再次检查\nSELECT DATABASE(); -- 结果：test\n\n-- 切换到另一个数据库\nUSE test2;\nSELECT DATABASE(); -- 结果：test2\n```\n\n### 🔍 重要特点\n- 首次必须从NULL状态切入\n- 后续可以直接在数据库间切换\n- 一旦切换，永远回不到NULL状态\n- 后续表操作都在当前数据库中进行","x":500,"y":750,"width":350,"height":350,"color":"4"},
		{"id":"database_backup","type":"text","text":"## 数据库备份操作\n\n### 💡 通俗理解\n**把整个房间的装修图纸和家具清单保存到文件**\n\n### 备份命令（在系统命令行执行）\n```bash\nmysqldump -u 用户名 -p 数据库名 > 备份文件.sql\n```\n\n**完整示例**：\n```bash\n# 先退出MySQL\nexit;\n\n# 切换到想要保存备份的目录\ncd ~/Desktop\n\n# 执行备份\nmysqldump -u root -p password bingo > backup.sql\n```\n\n### 🔍 备份文件内容\n打开 `backup.sql` 会看到：\n```sql\n-- 删除已存在的表\nDROP TABLE IF EXISTS `users`;\n\n-- 创建表结构\nCREATE TABLE `users` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n);\n\n-- 插入数据\nINSERT INTO `users` VALUES (1,'张三'),(2,'李四');\n```\n\n### 🔄 备份文件的作用\n- 📋 包含完整的表结构定义\n- 📊 包含所有数据记录\n- 🔄 可在新数据库中完整重现\n- 💾 类似于数据库的\"序列化\"","x":900,"y":750,"width":400,"height":350,"color":"3"},
		{"id":"sql_syntax_rules","type":"text","text":"## SQL语法规则总结\n\n### 💡 通俗理解\n**SQL就像说话要有语法，计算机才能懂**\n\n### 基本规则\n```sql\n-- 必须以分号结尾\nSHOW DATABASES;\n\n-- 关键字不区分大小写\nshow databases;\nSHOW DATABASES;\n\n-- 数据库名区分大小写（Linux）\nCREATE DATABASE Test;\nCREATE DATABASE test; -- 不同的数据库\n```\n\n### 🔍 中括号含义\n```sql\nCREATE DATABASE [IF NOT EXISTS] db_name \n[CHARACTER SET charset];\n```\n- `[]` = 可选参数\n- 可以省略不写\n- 有默认值\n\n### 常用模式\n```sql\n-- 查询类（SELECT/SHOW）\nSELECT/SHOW + 内容 + [条件];\n\n-- 操作类（CREATE/ALTER/DROP）\n操作 + 对象类型 + 对象名 + [参数];\n\n-- 使用类（USE）\nUSE + 数据库名;\n```","x":1350,"y":50,"width":300,"height":400,"color":"2"},
		{"id":"common_errors","type":"text","text":"## 常见错误与解决\n\n### 💡 通俗理解\n**新手常犯的错误，提前避坑**\n\n### 语法错误\n```sql\n-- ❌ 忘记分号\nSHOW DATABASES\n-- 提示: ->\n\n-- ❌ 忘记括号\nSELECT DATABASE\n-- 错误: 函数需要括号\n\n-- ✅ 正确写法\nSELECT DATABASE();\n```\n\n### 编码错误\n```sql\n-- ❌ 可能导致中文乱码\nCREATE DATABASE test;\n\n-- ✅ 明确指定编码\nCREATE DATABASE test \nCHARACTER SET utf8;\n```\n\n### 删除错误\n```sql\n-- ❌ 危险操作\nDROP DATABASE important_data;\n\n-- ✅ 安全操作\nDROP DATABASE IF EXISTS test_data;\n```\n\n### 🔧 调试技巧\n1. 看错误信息的行号\n2. 检查分号和括号\n3. 确认关键字拼写\n4. 使用 `IF EXISTS/IF NOT EXISTS`","x":1350,"y":500,"width":300,"height":350,"color":"red"},
		{"id":"practice_exercises","type":"text","text":"## 实践练习题\n\n### 💡 通俗理解\n**动手练习，熟能生巧**\n\n### 基础练习\n```sql\n-- 1. 查看所有数据库\nSHOW DATABASES;\n\n-- 2. 创建一个名为school的数据库\nCREATE DATABASE school CHARACTER SET utf8;\n\n-- 3. 查看school数据库的创建信息\nSHOW CREATE DATABASE school;\n\n-- 4. 切换到school数据库\nUSE school;\n\n-- 5. 确认当前数据库\nSELECT DATABASE();\n```\n\n### 进阶练习\n```sql\n-- 6. 查找所有以's'开头的数据库\nSHOW DATABASES LIKE 's%';\n\n-- 7. 安全创建数据库company\nCREATE DATABASE IF NOT EXISTS company;\n\n-- 8. 修改company数据库编码为gbk\nALTER DATABASE company CHARACTER SET gbk;\n\n-- 9. 安全删除测试数据库\nDROP DATABASE IF EXISTS test_temp;\n```\n\n### 🎯 练习目标\n- 熟练掌握基本命令\n- 理解编码的重要性\n- 养成安全操作习惯","x":50,"y":1150,"width":500,"height":400,"color":"5"},
		{"id":"next_steps","type":"text","text":"## 下节课预告\n\n### 💡 通俗理解\n**学会了管理房间，下一步学习管理房间里的家具**\n\n### 学习路径\n```\n第三节：数据库操作 ✅\n├── 创建、查询、修改、删除数据库\n├── 数据库切换和备份\n└── 编码问题解决\n\n第四节：表操作 ⏳\n├── 创建表结构\n├── 修改表结构  \n├── 查询表信息\n└── 删除表\n\n第五节：记录操作 ⏳\n├── 插入数据（INSERT）\n├── 查询数据（SELECT）\n├── 更新数据（UPDATE）\n└── 删除数据（DELETE）\n```\n\n### 🎯 学习建议\n1. 多动手练习基本命令\n2. 重视编码配置\n3. 养成备份好习惯\n4. 谨慎使用DROP命令","x":600,"y":1150,"width":400,"height":400,"color":"6"},
		{"id":"key_takeaways","type":"text","text":"## 核心知识点总结\n\n### 💡 一句话总结\n**数据库操作就是管理项目文件夹**\n\n### 🔑 关键命令\n```sql\n-- 查询\nSHOW DATABASES;\nSELECT DATABASE();\nSHOW CREATE DATABASE name;\n\n-- 创建\nCREATE DATABASE name CHARACTER SET utf8;\n\n-- 修改\nALTER DATABASE name CHARACTER SET utf8;\n\n-- 删除\nDROP DATABASE IF EXISTS name;\n\n-- 切换\nUSE database_name;\n```\n\n### ⚠️ 注意事项\n1. **编码很重要** - 影响中文存储\n2. **DELETE很危险** - 数据无法恢复  \n3. **分号必须加** - SQL语句结束符\n4. **切换有状态** - USE后无法回到NULL\n\n### 🎯 实用技巧\n- 用`IF EXISTS/IF NOT EXISTS`避免错误\n- 用`LIKE`进行模糊查询\n- 用`mysqldump`进行数据备份\n- 用`SHOW CREATE`查看详细配置","x":1050,"y":1150,"width":350,"height":400,"color":"1"},
		{"id":"mysql_login","type":"text","text":"## MySQL登录与初始状态\n\n### 💡 通俗理解\n**登录MySQL就像进入一个大楼，但还没进入具体房间**\n\n### 登录命令\n```bash\nmysql -u root -p\n# 或者直接带密码\nmysql -u root -p密码\n```\n\n### 查看当前状态\n```sql\nSELECT DATABASE();\n```\n**结果**: `NULL` - 表示在\"大楼门口\"，未进入任何数据库\n\n### 🔍 重要提示\n- 每条SQL语句必须以分号`;`结尾\n- 忘记分号会提示继续输入\n- 类似Python交互式命令行体验\n- 初始状态：在MySQL系统中，但不在任何具体数据库里","x":450,"y":50,"width":350,"height":280,"color":"2"},
		{"id":"ead8fa9f113f2ce7","x":-680,"y":260,"width":640,"height":600,"type":"text","text":"好问题！对于初学者来说，区分SQL中的“函数 (Function)”和“指令/命令 (Command/Statement)”确实有点小技巧。我们来捋一捋：\n\n一句话概括：**函数通常带有圆括号 `()` 并且返回一个值，而指令/命令是告诉数据库要做什么动作的大块头词。**\n\n下面是更详细的区分方法和例子：\n\n---\n\n## # 如何区分SQL中的函数和指令/命令\n\n### 1. 看有没有圆括号 `()`\n\n*   **函数 (Function)：**\n    *   **一句话概括：** 函数就像一个小工具，它会加工一些东西（或者不需要加工），然后给你一个“结果”（返回值）。它们几乎**总是**在名字后面跟着一对圆括号 `()`。\n    *   **细节：**\n        *   圆括号里可能包含“参数”（给函数加工的原材料），也可能为空（如果函数不需要原材料）。\n        *   例如：\n            *   `DATABASE()`：这里的 `DATABASE` 是函数名，`()` 表示调用它，它不需要参数，会返回当前数据库的名字。\n            *   `NOW()`：返回当前的日期和时间。\n            *   `LENGTH('hello')`：`LENGTH` 是函数，`'hello'` 是参数，它返回字符串 `'hello'` 的长度，即数字 $5$。\n            *   `UPPER('mysql')`：`UPPER` 是函数，`'mysql'` 是参数，它返回 `'MYSQL'`。\n*   **指令/命令 (Command/Statement)：**\n    *   **一句话概括：** 指令是告诉MySQL“去做某件事”的关键词，比如“显示所有数据库”、“创建一个新数据库”。它们通常**不会**在主要的关键词后面直接跟圆括号（除非圆括号是作为参数的一部分，比如在 `CREATE TABLE` 时定义列的类型和长度）。\n    *   **细节：**\n        *   指令是SQL语言的骨架，定义了要执行的操作类型。\n        *   例如：\n            *   `SHOW DATABASES;`：`SHOW` 是一个指令，后面跟的是它要操作的对象类型 `DATABASES`。\n            *   `CREATE DATABASE test;`：`CREATE` 是一个指令，后面指定要创建的是 `DATABASE`，并给它命名为 `test`。\n            *   `USE test;`：`USE` 是一个指令。\n            *   `SELECT * FROM my_table;`：`SELECT` 是一个核心指令。\n\n### 2. 看它们的“目的”\n\n*   **函数 (Function)：**\n    *   **目的：** 主要目的是**计算并返回一个特定的值**。这个值可以是数字、文本、日期、布尔值（真/假）等。\n    *   **例子：** `DATABASE()` 的目的是告诉你当前数据库的名字（一个文本值）。`COUNT(*)` 的目的是计算行数（一个数字值）。\n*   **指令/命令 (Command/Statement)：**\n    *   **目的：** 主要目的是**执行一个操作**或**请求数据库返回一批结构化的信息**。\n    *   **例子：** `CREATE DATABASE` 的目的是在服务器上创建一个新的数据库（一个动作）。`SHOW DATABASES` 的目的是列出所有数据库的名称（请求一批信息）。 `DROP DATABASE` 的目的是删除一个数据库（一个动作）。\n\n### 3. 看它们如何“被使用”\n\n*   **函数 (Function)：**\n    *   通常**嵌入在其他指令中**，尤其是在 `SELECT` 语句的查询列表里，或者 `WHERE` 子句的条件里，或者 `INSERT`、`UPDATE` 语句的赋值里。\n    *   例如：\n        *   `SELECT DATABASE();` (函数 `DATABASE()` 被 `SELECT` 指令用来显示其返回值)\n        *   `SELECT UPPER(name_column) FROM users;` (函数 `UPPER()` 用来处理 `name_column` 的值)\n        *   `WHERE LENGTH(password) < 8;` (函数 `LENGTH()` 用在 `WHERE` 条件中)\n*   **指令/命令 (Command/Statement)：**\n    *   通常是**一个独立的、完整的操作单元**。\n    *   例如：\n        *   `SHOW DATABASES;` (一个完整的操作)\n        *   `ALTER DATABASE test2 CHARACTER SET utf8;` (一个完整的操作)\n\n### 总结表格\n\n| 特征             | SQL 函数 (Function)                                   | SQL 指令/命令 (Statement/Command)                  |\n| :--------------- | :---------------------------------------------------- | :------------------------------------------------- |\n| **核心标志**     | 通常有圆括号 `()`，如 `DATABASE()`                     | 主要关键词后通常无直接的 `()`，如 `SHOW DATABASES`    |\n| **主要目的**     | 计算/获取并**返回一个单一值**                           | **执行一个动作**或请求一批结构化数据                 |\n| **如何使用**     | 常作为其他指令的一部分，提供值                          | 通常是独立的、完整的操作单元                       |\n| **例子中体现**   | `DATABASE()` <br> `NOW()` (视频未直接用，但常用)          | `SELECT` (用来显示函数结果)<br>`SHOW DATABASES`<br>`CREATE DATABASE`<br>`ALTER DATABASE`<br>`DROP DATABASE`<br>`USE` |\n\n---\n\n**回到视频中的例子：**\n\n1.  `SELECT DATABASE();`\n    *   `SELECT`: 这是**指令**，意思是“查询并显示”。\n    *   `DATABASE()`: 这是**函数**，它会返回当前数据库的名称。\n    *   整句话的意思是：“调用 `DATABASE()` 函数，获取它的返回值，然后用 `SELECT` 指令把这个值显示出来。”\n\n2.  `SHOW DATABASES;`\n    *   `SHOW`: 这是**指令**，意思是“显示信息”。\n    *   `DATABASES`: 指明了 `SHOW` 指令要显示的对象是“所有数据库”。\n    *   这里没有圆括号紧跟在 `SHOW` 或 `DATABASES` 后面，并且它的目的是执行一个动作（列出数据库），所以它是指令。\n\n3.  `CREATE DATABASE test;`\n    *   `CREATE`: 这是**指令**。\n    *   `DATABASE`: 指明 `CREATE` 的对象类型。\n    *   `test`: 是参数，数据库的名字。\n    *   这是指令。\n\n希望这样解释能帮你更好地理解它们的区别！记住“圆括号”和“返回值”是辨认函数的两个好帮手。"}
	],
	"edges":[
		{"id":"edge1","fromNode":"title","fromSide":"bottom","toNode":"concept_foundation","toSide":"right","color":"4"},
		{"id":"edge2","fromNode":"concept_foundation","fromSide":"right","toNode":"mysql_login","toSide":"left","color":"2"},
		{"id":"edge3","fromNode":"mysql_login","fromSide":"right","toNode":"database_query","toSide":"left","color":"3"},
		{"id":"edge4","fromNode":"database_query","fromSide":"left","toNode":"database_create","toSide":"right","color":"4"},
		{"id":"edge5","fromNode":"database_create","fromSide":"right","toNode":"database_info","toSide":"left","color":"5"},
		{"id":"edge6","fromNode":"database_info","fromSide":"right","toNode":"database_modify","toSide":"left","color":"6"},
		{"id":"edge7","fromNode":"database_modify","fromSide":"left","toNode":"database_delete","toSide":"right","color":"red"},
		{"id":"edge8","fromNode":"database_delete","fromSide":"right","toNode":"database_switch","toSide":"left","color":"4"},
		{"id":"edge9","fromNode":"database_switch","fromSide":"right","toNode":"database_backup","toSide":"left","color":"3"},
		{"id":"edge10","fromNode":"database_query","fromSide":"right","toNode":"sql_syntax_rules","toSide":"left","color":"2"},
		{"id":"edge11","fromNode":"sql_syntax_rules","fromSide":"bottom","toNode":"common_errors","toSide":"top","color":"red"},
		{"id":"edge12","fromNode":"database_backup","fromSide":"left","toNode":"practice_exercises","toSide":"right","color":"5"},
		{"id":"edge13","fromNode":"practice_exercises","fromSide":"right","toNode":"next_steps","toSide":"left","color":"6"},
		{"id":"edge14","fromNode":"next_steps","fromSide":"right","toNode":"key_takeaways","toSide":"left","color":"1"},
		{"id":"edge15","fromNode":"common_errors","fromSide":"bottom","toNode":"key_takeaways","toSide":"top","color":"1"}
	]
}
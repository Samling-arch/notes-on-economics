{
	"nodes":[
		{"id":"title","type":"text","text":"# 窗口函数完全指南\n\n**数据分析训练营** | 经典老师 | 2021-05-18\n\n[视频链接](https://www.bilibili.com/video/av205732110/)\n\n*从零开始掌握SQL窗口函数的核心概念与应用*","x":400,"y":-150,"width":700,"height":140,"color":"1"},
		{"id":"partition_concept","type":"text","text":"# PARTITION BY - 数据分组\n\n**一句话概括：** 就像把数据分成不同的\"房间\"，每个房间内单独计算\n\n## 工作原理\n\n### 语法结构\n```sql\nPARTITION BY 字段名\n```\n\n### 实际应用\n- 按年份分组：每年内部单独计算\n- 按部门分组：每个部门内部单独计算\n- 按地区分组：每个地区内部单独计算\n\n### 重要提醒\n如果不写 `PARTITION BY`：\n- 整个表就是一个大\"房间\"\n- 所有数据一起参与计算\n- 相当于没有分组限制\n\n### 数学表示\n设数据集为 $D$，按字段 $f$ 分组：\n$$D = D_1 \\cup D_2 \\cup ... \\cup D_n$$\n其中 $D_i$ 表示第 $i$ 个分组","x":1000,"y":50,"width":400,"height":350,"color":"4"},
		{"id":"window_function_types","type":"text","text":"# 窗口函数分类\n\n**一句话概括：** 窗口函数就像给数据加了一个\"透视镜\"，能看到当前行周围的数据并进行计算\n\n## 1. 专有窗口函数\n\n这些是窗口环境下的专属函数，就像专门的工具：\n\n- **RANK()** - 排名函数（有并列，跳号）\n- **DENSE_RANK()** - 密集排名（有并列，不跳号）\n- **ROW_NUMBER()** - 行号函数（连续编号）\n\n## 2. 聚合类窗口函数\n\n把传统聚合函数\"搬\"到窗口环境：\n\n- **SUM()** - 求和\n- **COUNT()** - 计数\n- **AVG()** - 平均值\n- **MAX()** - 最大值\n- **MIN()** - 最小值\n\n*这些函数既能在GROUP BY中使用，也能在窗口中使用*","x":-380,"y":65,"width":400,"height":320,"color":"2"},
		{"id":"difference_comparison","type":"text","text":"# 窗口函数 VS 普通聚合函数\n\n**一句话概括：** 普通聚合是\"多变一\"，窗口函数是\"多对多\"\n\n## 核心区别对比\n\n### 1. 数据输出方式\n\n**普通聚合函数：**\n- 多条记录 → 一条结果\n- 配合 `GROUP BY` 使用\n- 结果集行数减少\n\n**示例：**\n```sql\nSELECT 年份, SUM(销售额) \nFROM 销售表 \nGROUP BY 年份;\n-- 输入10行，可能输出3行\n```\n\n**窗口函数：**\n- 每条记录都有输出\n- 原有多少行，结果还是多少行\n- 每行都能看到\"窗口\"内的计算结果\n\n**示例：**\n```sql\nSELECT *, SUM(销售额) OVER(PARTITION BY 年份) \nFROM 销售表;\n-- 输入10行，输出还是10行\n```","x":400,"y":50,"width":450,"height":350,"color":"3"},
		{"id":"order_by_concept","type":"text","text":"# ORDER BY - 数据排序\n\n**一句话概括：** 给数据排队，决定计算的先后顺序\n\n## 核心作用\n\n### 1. 确定计算顺序\n- 按时间排序：时间序列分析\n- 按金额排序：排名分析\n- 按字母排序：字典序分析\n\n### 2. 影响窗口计算\n排序后，窗口函数会：\n- 按排序后的顺序进行编号\n- 确定\"当前行\"的位置\n- 决定\"前面\"和\"后面\"的概念\n\n### 3. 语法形式\n```sql\nORDER BY 字段名 [ASC|DESC]\n```\n\n### 4. 组合使用\n- 可以单独使用\n- 可以与 `PARTITION BY` 配合\n- 是窗口范围定义的基础\n\n**数学含义：** 建立位置索引 $i_1, i_2, ..., i_n$","x":-380,"y":460,"width":400,"height":320,"color":"5"},
		{"id":"window_rows_concept","type":"text","text":"# ROWS BETWEEN - 窗口范围\n\n**一句话概括：** 定义\"计算时看多远\"，就像设定视野范围\n\n## 窗口范围定义\n\n### 基本语法\n```sql\nROWS BETWEEN start AND end\n```\n\n### 常用范围表达式\n- `UNBOUNDED PRECEDING` - 从最开始\n- `CURRENT ROW` - 当前行\n- `UNBOUNDED FOLLOWING` - 到最末尾\n- `n PRECEDING` - 前面第n行\n- `n FOLLOWING` - 后面第n行\n\n### 实际示例\n```sql\n-- 累计求和（从开始到当前行）\nROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n\n-- 移动平均（当前行+前后各1行）\nROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n```\n\n### 数学表示\n对于位置 $i$ 的窗口：\n$$W_i = \\{r_j : start_i \\leq j \\leq end_i\\}$$\n其中 $r_j$ 表示第 $j$ 行记录","x":300,"y":460,"width":450,"height":320,"color":"6"},
		{"id":"sliding_window","type":"text","text":"# 滑动窗口 VS 静态窗口\n\n**一句话概括：** 滑动窗口像\"移动的放大镜\"，静态窗口像\"固定的全景图\"\n\n## 滑动窗口（Dynamic Window）\n\n### 特征\n- 窗口大小可能变化\n- 窗口内容随当前行变化\n- 每行计算使用不同的数据集\n\n### 触发条件\n- 使用了 `ORDER BY`\n- 定义了 `ROWS BETWEEN`\n\n### 实际案例\n计算每个订单的\"前后2个订单平均金额\"：\n- 第1行：看第1-3行\n- 第2行：看第1-4行  \n- 第3行：看第2-5行\n- ...\n\n## 静态窗口（Static Window）\n\n### 特征\n- 窗口大小固定\n- 每行使用相同的数据集\n- 通常是整个分组的数据\n\n### 触发条件\n- 只有 `PARTITION BY`\n- 没有 `ORDER BY` 和 `ROWS`\n\n### 数学表示\n- 滑动：$W_i \\neq W_j$ （当 $i \\neq j$）\n- 静态：$W_i = W_j = W$ （对所有 $i,j$）","x":1200,"y":440,"width":400,"height":350,"color":"2"},
		{"id":"practical_example","type":"text","text":"# 实战案例：累计销售额计算\n\n**一句话概括：** 通过窗口函数实现\"越往后，累计越多\"的效果\n\n## 业务需求\n计算每条记录的\"全年累计销售额\"\n\n## SQL实现\n```sql\nSELECT \n    订单日期,\n    销售额,\n    SUM(销售额) OVER (\n        PARTITION BY YEAR(订单日期)\n        ORDER BY 订单日期\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n    ) AS 累计销售额\nFROM 销售表\nORDER BY 订单日期;\n```\n\n## 计算过程详解\n\n**第1条记录：**\n- 窗口范围：只有第1行\n- 累计销售额 = $1000\n\n**第2条记录：**\n- 窗口范围：第1-2行\n- 累计销售额 = $1000 + $2000 = $3000\n\n**第3条记录：**\n- 窗口范围：第1-3行  \n- 累计销售额 = $1000 + $2000 + $1500 = $4500\n\n### 数学公式\n$$累计销售额_i = \\sum_{j=1}^{i} 销售额_j$$","x":-660,"y":820,"width":500,"height":380,"color":"1"},
		{"id":"key_formulas","type":"text","text":"# 核心数学公式汇总\n\n**一句话概括：** 窗口函数的数学本质是\"在有限集合上的函数运算\"\n\n## 1. 窗口定义公式\n\n### 基本窗口\n$$W_i = \\{r_j : condition(i,j)\\}$$\n其中 $r_j$ 表示第 $j$ 行记录\n\n### 累计窗口（UNBOUNDED PRECEDING）\n$$W_i = \\{r_1, r_2, ..., r_i\\}$$\n\n### 滑动窗口（n PRECEDING AND m FOLLOWING）\n$$W_i = \\{r_{i-n}, r_{i-n+1}, ..., r_i, ..., r_{i+m}\\}$$\n\n## 2. 常用聚合公式\n\n### 窗口求和\n$$SUM\\_WINDOW_i = \\sum_{j \\in W_i} value_j$$\n\n### 窗口平均\n$$AVG\\_WINDOW_i = \\frac{1}{|W_i|} \\sum_{j \\in W_i} value_j$$\n\n### 窗口计数\n$$COUNT\\_WINDOW_i = |W_i|$$\n\n其中 $|W_i|$ 表示窗口 $W_i$ 中的记录数量","x":-460,"y":1580,"width":600,"height":350,"color":"5"},
		{"id":"syntax_summary","type":"text","text":"# 窗口函数语法总结\n\n**一句话概括：** 窗口函数 = 函数 + OVER + 窗口定义\n\n## 完整语法结构\n\n```sql\n函数名() OVER (\n    [PARTITION BY 字段列表]\n    [ORDER BY 字段列表]\n    [ROWS BETWEEN 起始 AND 结束]\n)\n```\n\n## 各部分说明\n\n### 1. 函数名\n- 专有窗口函数：`RANK()`, `ROW_NUMBER()`等\n- 聚合函数：`SUM()`, `AVG()`, `COUNT()`等\n\n### 2. PARTITION BY（可选）\n- 数据分组\n- 相当于\"房间划分\"\n\n### 3. ORDER BY（可选）\n- 排序规则\n- 决定计算顺序\n\n### 4. ROWS BETWEEN（可选）\n- 窗口范围\n- 决定\"看多远\"\n\n## 简化写法\n```sql\n-- 最简形式\nSUM() OVER ()\n\n-- 只分组\nSUM() OVER (PARTITION BY 年份)\n\n-- 分组+排序\nSUM() OVER (PARTITION BY 年份 ORDER BY 日期)\n```","x":650,"y":1555,"width":400,"height":400,"color":"4"},
		{"id":"moving_average_example","type":"text","text":"# 实战案例：移动平均支付金额\n\n**一句话概括：** 计算\"我和我的邻居们\"的平均值\n\n## 业务需求\n计算每个订单和前后2个订单的移动平均支付金额\n\n## SQL实现\n```sql\nSELECT \n    订单ID,\n    支付金额,\n    AVG(支付金额) OVER (\n        ORDER BY 订单时间\n        ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n    ) AS 移动平均金额\nFROM 订单支付表\nORDER BY 订单时间;\n```\n\n## 滑动过程演示\n\n**处理第2行时：**\n- 窗口：第1、2、3行\n- 移动平均 = $(金额_1 + 金额_2 + 金额_3) ÷ 3$\n\n**处理第3行时：**\n- 窗口：第2、3、4行\n- 移动平均 = $(金额_2 + 金额_3 + 金额_4) ÷ 3$\n\n### 数学公式\n$$移动平均_i = \\frac{1}{|W_i|} \\sum_{j \\in W_i} 支付金额_j$$\n\n其中 $W_i$ 是第 $i$ 行对应的窗口","x":625,"y":850,"width":450,"height":350,"color":"3"}
	],
	"edges":[
		{"id":"edge1","fromNode":"title","fromSide":"bottom","toNode":"window_function_types","toSide":"right","color":"1","label":"函数分类"},
		{"id":"edge2","fromNode":"title","fromSide":"bottom","toNode":"difference_comparison","toSide":"top","color":"2","label":"核心区别"},
		{"id":"edge3","fromNode":"window_function_types","fromSide":"right","toNode":"difference_comparison","toSide":"left","color":"3","label":"对比分析"},
		{"id":"edge4","fromNode":"difference_comparison","fromSide":"right","toNode":"partition_concept","toSide":"left","color":"4","label":"分组机制"},
		{"id":"edge5","fromNode":"partition_concept","fromSide":"left","toNode":"order_by_concept","toSide":"right","color":"5","label":"排序规则"},
		{"id":"edge6","fromNode":"order_by_concept","fromSide":"right","toNode":"window_rows_concept","toSide":"left","color":"6","label":"窗口范围"},
		{"id":"edge7","fromNode":"window_rows_concept","fromSide":"right","toNode":"sliding_window","toSide":"left","color":"2","label":"窗口类型"},
		{"id":"edge8","fromNode":"sliding_window","fromSide":"left","toNode":"practical_example","toSide":"right","color":"1","label":"实际应用"},
		{"id":"edge9","fromNode":"practical_example","fromSide":"right","toNode":"moving_average_example","toSide":"left","color":"3","label":"案例扩展"},
		{"id":"edge10","fromNode":"moving_average_example","fromSide":"bottom","toNode":"syntax_summary","toSide":"top","color":"4","label":"语法总结"},
		{"id":"edge11","fromNode":"syntax_summary","fromSide":"left","toNode":"key_formulas","toSide":"right","color":"5","label":"数学公式"},
		{"id":"edge12","fromNode":"window_rows_concept","fromSide":"bottom","toNode":"key_formulas","toSide":"top","color":"6","label":"公式应用"},
		{"id":"edge13","fromNode":"partition_concept","fromSide":"bottom","toNode":"practical_example","toSide":"top","color":"2","label":"分组应用"}
	]
}
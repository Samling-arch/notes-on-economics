{
	"nodes":[
		{"id":"title","type":"text","text":"# MySQL高级查询：HAVING与分组过滤\n\n**苑昊老师 | 2024-12-18**\n\n[课程视频](https://www.bilibili.com/video/BV1mxrfYsEyP/)","x":400,"y":-150,"width":800,"height":120},
		{"id":"sql_structure","type":"text","text":"## SQL完整语法结构\n```sql\nSELECT [字段]\nFROM [表名]\nWHERE [记录级过滤]\nGROUP BY [分组字段]\nHAVING [组级过滤]\nORDER BY [排序]\nLIMIT [限制]\n```\n\n### 通俗解释：\n1. **WHERE**：先筛掉不合格的\"士兵\"（行记录）\n2. **GROUP BY**：把士兵按\"兵种\"分组\n3. **HAVING**：淘汰不达标的\"整个兵团\"（分组）\n4. **SELECT**：最后展示精锐部队\n\n# 执行顺序：FROM → WHERE → GROUP BY → HAVING → SELECT","x":200,"y":50,"width":350,"height":280},
		{"id":"case1","type":"text","text":"## 案例1：基础分组查询\n```sql\n-- 男女员工人数统计\nSELECT gender AS 性别, COUNT(*) AS 人数\nFROM emp\nGROUP BY gender;\n```\n\n### 执行过程：\n1. 全表扫描 32 条记录\n2. 按 gender 分成 2 组\n3. 统计每组的记录数\n\n# 结果：\n| 性别 | 人数 |\n|------|------|\n| 男   | $18$ |\n| 女   | $14$ |","x":200,"y":350,"width":400,"height":250},
		{"id":"summary","type":"text","text":"## 核心总结\n\n### HAVING 的本质\n> 对 **分组结果集** 进行条件过滤\n\n### 黄金口诀\n1. WHERE → 行级过滤（处理原始数据）\n2. GROUP BY → 创建分组\n3. HAVING → 组级过滤（处理聚合结果）\n\n# 数学关系：\n$$ \\text{最终结果} = \\pi_{\\text{SELECT}} ( \\sigma_{\\text{HAVING}} ( \\gamma_{\\text{GROUP BY}} ( \\sigma_{\\text{WHERE}} (\\text{表}) ) ) ) $$","x":500,"y":1400,"width":500,"height":200},
		{"id":"having_vs_where","type":"text","text":"## HAVING 与 WHERE 核心区别\n\n### WHERE（分组前过滤）\n- 作用对象：单条记录\n- 执行时机：在分组**前**执行\n- 示例：`WHERE salary > 8000`\n\n### HAVING（分组后过滤）\n- 作用对象：整个分组\n- 执行时机：在分组**后**执行\n- 依赖：必须配合 GROUP BY\n- 示例：`HAVING AVG(salary) > 8000`\n\n# 黄金法则：\n> 过滤**个体**用 WHERE，过滤**团队**用 HAVING","x":925,"y":0,"width":400,"height":350},
		{"id":"case2","type":"text","text":"## 案例2：WHERE + GROUP BY 组合\n```sql\n-- 25岁以上男女员工人数\nSELECT gender, COUNT(*)\nFROM emp\nWHERE age > 25  -- 先过滤记录\nGROUP BY gender; -- 再分组统计\n```\n\n### 执行逻辑：\n1. WHERE 淘汰年龄 ≤ $25$ 的记录\n2. 剩余 $16$ 条记录参与分组\n3. 分组统计\n\n# 对比实验：\n- 不加 WHERE：$32$ 人参与统计\n- 加 WHERE：$16$ 人参与统计","x":1000,"y":350,"width":450,"height":300},
		{"id":"case3","type":"text","text":"## 案例3：HAVING 分组后过滤\n```sql\n-- 平均薪资>8500的部门\nSELECT dept, AVG(salary) AS avg_salary\nFROM emp\nGROUP BY dept\nHAVING avg_salary > 8500; \n```\n\n### 执行流程：\n1. 按部门分成 3 组\n2. 计算每组平均薪资：\n   - 教学部 $9700\n   - 运营部 $12000\n   - 销售部 $8000\n3. HAVING 淘汰销售部（$8000 < 8500$）\n\n# 公式本质：\n$$ \\text{HAVING} = \\sigma_{\\text{组条件}}(\\text{GROUP BY结果}) $$","x":-400,"y":725,"width":450,"height":300},
		{"id":"case4","type":"text","text":"## 案例4：特殊聚合函数\n```sql\n-- 各部门员工姓名拼接\nSELECT dept, \n       GROUP_CONCAT(name) AS members\nFROM emp\nGROUP BY dept;\n```\n\n### 输出示例：\n| 部门 | members |\n|------|---------|\n| 教学部 | \"张三,李四...\" |\n\n# 函数原理：\n- GROUP_CONCAT()：将组内字符串拼接\n- 相当于：$$ \\text{str}_1 \\oplus \\text{str}_2 \\oplus ... \\oplus \\text{str}_n $$","x":-400,"y":1400,"width":450,"height":250},
		{"id":"case5","type":"text","text":"## 案例5：全表聚合\n```sql\n-- 公司总人数\nSELECT COUNT(*) AS total \nFROM emp; \n\n-- 公司平均工资\nSELECT AVG(salary) AS avg_all\nFROM emp;\n```\n\n### 本质：\n- 将全表视为 **1个大数据组**\n- 无需 GROUP BY\n- 聚合函数直接作用在全表\n\n# 数学表示：\n$$ \\text{total} = \\sum_{i=1}^{n} 1 \\quad (n=32) $$\n$$ \\text{avg\\_all} = \\frac{1}{n} \\sum_{i=1}^{n} \\text{salary}_i $$","x":200,"y":1000,"width":400,"height":200},
		{"id":"case6","type":"text","text":"## 案例6：时间维度分组\n```sql\n-- 每年出生员工数\nSELECT \n  YEAR(birthday) AS birth_year,\n  COUNT(*) AS count\nFROM emp\nGROUP BY birth_year\nORDER BY count DESC; \n```\n\n### 关键技巧：\n1. YEAR() 提取年份\n2. 按年份分组\n3. 按人数降序排序\n\n# 分组逻辑：\n- 有效分组字段：离散值（如年份、部门）\n- 无效分组字段：唯一值（如 id、name）\n- 分组数 ≈ 数据洞察维度","x":1040,"y":875,"width":450,"height":300}
	],
	"edges":[
		{"id":"e1","fromNode":"title","fromSide":"bottom","toNode":"sql_structure","toSide":"right","color":"2"},
		{"id":"e2","fromNode":"sql_structure","fromSide":"right","toNode":"having_vs_where","toSide":"left","color":"3"},
		{"id":"e3","fromNode":"having_vs_where","fromSide":"left","toNode":"case1","toSide":"right","color":"4"},
		{"id":"e4","fromNode":"case1","fromSide":"right","toNode":"case2","toSide":"left","color":"4"},
		{"id":"e5","fromNode":"case1","fromSide":"bottom","toNode":"case3","toSide":"top","color":"2"},
		{"id":"e6","fromNode":"case3","fromSide":"bottom","toNode":"case4","toSide":"top","color":"3"},
		{"id":"e7","fromNode":"sql_structure","fromSide":"bottom","toNode":"case5","toSide":"top","color":"1"},
		{"id":"e8","fromNode":"case2","fromSide":"bottom","toNode":"case6","toSide":"top","color":"5"},
		{"id":"e9","fromNode":"case5","fromSide":"bottom","toNode":"summary","toSide":"top","color":"6"},
		{"id":"e10","fromNode":"case6","fromSide":"bottom","toNode":"summary","toSide":"top","color":"6"}
	]
}
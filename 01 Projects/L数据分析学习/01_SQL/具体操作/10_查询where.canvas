{
	"nodes":[
		{"id":"title","type":"text","text":"# MySQL从基础到进阶：查询记录\n\n**第二讲** | 苑昊老师 | 2024-12-18\n\n[视频链接](https://www.bilibili.com/video/BV1mxrfYsEyP/)\n\n> 当数据量无限爆炸式往上走时，文本式数据库已经完全不够用了","x":400,"y":-150,"width":700,"height":150,"color":"1"},
		{"id":"why_mysql","type":"text","text":"## 为什么要用MySQL？\n\n### 数据量级对比\n- **Excel处理能力**: 适合小量数据\n- **MySQL处理能力**: 万条、十万条、百万条、千万条、亿条\n\n### 性能对比\n- **文本数据库**: 性能低、效率差、功能有限\n- **MySQL**: 高性能、高效率、功能强大\n\n### 核心优势\n**查询功能是MySQL最能体现价值的地方**\n\n> 通俗理解：Excel像个小商店，MySQL像个大仓库，数据越多差距越明显","x":50,"y":50,"width":450,"height":300,"color":"2"},
		{"id":"table_creation","type":"text","text":"## 员工表(EMP)结构设计\n\n### 表结构定义\n```sql\nCREATE TABLE emp (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    gender ENUM('男', '女', '其他'),\n    age TINYINT,\n    department VARCHAR(100),\n    province VARCHAR(50),\n    salary DOUBLE(7,2)\n);\n```\n\n### 字段类型详解\n- **id**: 主键，唯一标识\n- **name**: 员工姓名，字符串类型\n- **gender**: 🔥**枚举类型** - 只能三选一\n- **age**: 微整型 - 一个字节够用($256$)\n- **department**: 部门，字符串\n- **province**: 省份，字符串  \n- **salary**: 浮点型($7$位整数，$2$位小数)\n\n> 通俗理解：就像给每个员工建立一个标准档案卡","x":50,"y":400,"width":450,"height":400,"color":"5"},
		{"id":"where_operators","type":"text","text":"## WHERE条件运算符\n\n### 比较运算符\n- **>**: 大于\n- **<**: 小于  \n- **>=**: 大于等于\n- **<=**: 小于等于\n- **=**: 等于\n- **!=** 或 **<>**: 不等于\n\n### 范围运算符\n- **BETWEEN ... AND**: 在范围内（闭区间）\n- **IN(值1, 值2, ...)**: 在指定值集合中\n\n### 逻辑运算符\n- **AND**: 逻辑与\n- **OR**: 逻辑或\n- **NOT**: 逻辑非\n\n### 模式匹配\n- **LIKE**: 模糊匹配\n- **正则表达式**: 高级匹配\n\n> 通俗理解：这些运算符就像各种筛选工具，帮你精确找到想要的数据","x":50,"y":850,"width":500,"height":400,"color":"2"},
		{"id":"in_operator","type":"text","text":"## IN操作符详解\n\n### 语法格式\n```sql\nSELECT * FROM emp \nWHERE 字段名 IN (值1, 值2, 值3, ...);\n```\n\n### 实际案例\n```sql\n-- 查询年龄为22, 24, 28岁的员工\nSELECT * FROM emp \nWHERE age IN (22, 24, 28);\n```\n\n### IN vs BETWEEN AND\n- **IN**: 精确匹配指定值（OR逻辑）\n- **BETWEEN AND**: 连续范围匹配\n\n### IN vs OR对比\n```sql\n-- 使用IN（推荐）\nWHERE age IN (22, 24, 28, 30, 32)\n\n-- 使用OR（繁琐）\nWHERE age=22 OR age=24 OR age=28 OR age=30 OR age=32\n```\n\n> 通俗理解：IN就像点名册，名单上的人才要，其他人都不要","x":50,"y":1300,"width":500,"height":440,"color":"5"},
		{"id":"where_importance","type":"text","text":"## WHERE子句的重要性\n\n### 现实场景类比\n- **网站分页**: 不会一次显示所有数据\n- **豆瓣电影**: 按类型、地区、年代筛选\n- **招聘网站**: 按地区、经验、薪资筛选\n\n### 筛选示例\n- 拉钩网查Python岗位\n- 要求：北京 + Python + 3-5年经验 + 1万以上月薪\n\n### 核心原理\n**几乎所有查询都需要条件筛选，很少直接查询全部数据**\n\n> 通俗理解：WHERE就像筛子，帮你从海量数据中找到想要的那部分","x":1200,"y":50,"width":400,"height":300,"color":"4"},
		{"id":"select_syntax","type":"text","text":"## SELECT标准语法结构\n\n### 基础语法\n```sql\nSELECT 字段1, 字段2, ...\nFROM 表名\nWHERE 条件\nGROUP BY 分组字段\nHAVING 分组条件\nORDER BY 排序字段\nLIMIT 限制数量;\n```\n\n### 语法组成说明\n- **SELECT**: 查询关键字，选择要显示的字段\n- **FROM**: 指定数据来源表\n- **WHERE**: 🔥**最重要！**筛选条件\n- **其他子句**: 分组、排序、限制等\n\n> 通俗理解：WHERE的使用频率比其他所有子句加起来乘以10还要多！","x":600,"y":25,"width":400,"height":350,"color":"3"},
		{"id":"field_selection","type":"text","text":"## 字段选择查询\n\n### 查询所有字段\n```sql\n-- 不推荐写法（新手标志）\nSELECT * FROM emp;\n\n-- 推荐写法（专业做法）\nSELECT id, name, gender, age, \n       department, province, salary \nFROM emp;\n```\n\n### 查询指定字段\n```sql\n-- 只查询姓名和薪资\nSELECT name, salary FROM emp;\n```\n\n### ⚠️ 重要提醒\n**为什么不建议用星号(*)？**\n- 性能差：MySQL需要先查找所有字段名\n- 效率低：指定字段直接获取，省略查找过程\n\n> 通俗理解：指定字段就像点菜，星号就像说\"随便上菜\"，前者更高效","x":1200,"y":400,"width":400,"height":350,"color":"1"},
		{"id":"batch_insert","type":"text","text":"## 批量插入数据\n\n### 批量插入语法\n```sql\nINSERT INTO emp VALUES\n(1, '张三', '男', 25, 'IT部', '北京', 8000.00),\n(2, '李四', '女', 28, '财务部', '上海', 9000.00),\n(3, '王五', '男', 32, '人事部', '广东', 7500.00),\n-- ... 更多数据\n```\n\n### 优势对比\n- **单条插入**: 慢，效率低\n- **批量插入**: 快，一次性插入多条\n\n### 执行结果\n成功插入$35$条员工记录\n\n> 通俗理解：就像批量复印文件，比一张张复印快多了","x":600,"y":400,"width":400,"height":400,"color":"6"},
		{"id":"summary_next","type":"text","text":"## 本节课总结\n\n### 🎯 核心知识点\n1. **MySQL的价值**: 处理大数据量的利器\n2. **SELECT语法**: 查询的基础结构\n3. **WHERE子句**: 🔥 最重要的筛选工具\n4. **运算符**: 比较、范围、逻辑运算\n5. **性能优化**: 避免星号，必加条件\n\n### 📚 下节预告\n继续深入学习WHERE的高级用法和其他查询技巧\n\n### 💡 学习建议\n**多练习，多敲代码，MySQL没有复杂逻辑，关键在于熟练度！**\n\n> 通俗理解：今天学会了数据筛选的基本功，下节课学更高级的招式","x":520,"y":1800,"width":500,"height":250,"color":"2"},
		{"id":"real_world_applications","type":"text","text":"## 真实应用场景分析\n\n### 网站分页机制\n- **问题**: 数据库有$100$万条记录，不能全部显示\n- **解决**: 使用WHERE + LIMIT实现分页\n- **参数传递**: 页码、每页数量作为筛选条件\n\n### 豆瓣电影筛选\n```\n用户点击: 类型=爱情, 地区=中国, 年代=2020\n↓\n前端发送AJAX请求，携带参数\n↓  \n后端接收参数，构造WHERE条件\n↓\nMySQL执行查询，返回结果\n```\n\n### 招聘网站筛选\n```\n用户选择: 城市=北京, 技能=Python, 经验=3-5年, 薪资>10000\n↓\nWHERE city='北京' AND skill LIKE '%Python%' \n  AND experience BETWEEN 3 AND 5 \n  AND salary > 10000\n```\n\n> 通俗理解：所有网站的筛选功能背后都是WHERE条件在工作","x":600,"y":1300,"width":500,"height":440,"color":"6"},
		{"id":"between_and","type":"text","text":"## BETWEEN AND范围查询\n\n### 语法格式\n```sql\nSELECT * FROM emp \nWHERE 字段名 BETWEEN 值1 AND 值2;\n```\n\n### 实际案例\n```sql\n-- 查询年龄在20-30之间的员工（闭区间）\nSELECT * FROM emp \nWHERE age BETWEEN 20 AND 30;\n\n-- 查询薪资在8000-12000之间的员工\nSELECT * FROM emp \nWHERE salary BETWEEN 8000 AND 12000;\n```\n\n### 🔑 关键点\n- **闭区间**: $20$ 和 $30$ 都能取到\n- **包含边界值**: BETWEEN 20 AND 30 包括20和30\n\n> 通俗理解：BETWEEN就像划定一个范围圈，圈内的都要，圈外的都不要","x":1200,"y":855,"width":420,"height":390,"color":"4"},
		{"id":"performance_tips","type":"text","text":"## 性能优化建议\n\n### ❌ 避免的做法\n```sql\n-- 查询全表（危险！）\nSELECT * FROM large_table;\n\n-- 使用星号（低效）\nSELECT * FROM emp;\n```\n\n### ✅ 推荐的做法\n```sql\n-- 指定字段（高效）\nSELECT name, salary FROM emp;\n\n-- 添加WHERE条件（必须）\nSELECT name, salary FROM emp \nWHERE department = 'IT部';\n```\n\n### 性能差异\n- **无条件查询**: 数据量大时可能崩溃\n- **有条件查询**: 快速定位，性能优异\n- **指定字段**: 减少数据传输，提升效率\n\n> 通俗理解：就像在图书馆找书，直接说要哪本比说\"把所有书都给我\"效率高多了","x":1200,"y":1300,"width":400,"height":440,"color":"1"},
		{"id":"comparison_examples","type":"text","text":"## 比较运算符实例\n\n### 年龄筛选\n```sql\n-- 查询年龄大于30岁的员工\nSELECT * FROM emp WHERE age > 30;\n\n-- 查询年龄小于30岁的员工  \nSELECT * FROM emp WHERE age < 30;\n```\n\n### 薪资筛选\n```sql\n-- 查询薪资超过1万的员工\nSELECT * FROM emp WHERE salary > 10000;\n```\n\n### 执行结果\n- **age > 30**: 筛选出所有30岁以上员工\n- **age < 30**: 筛选出所有30岁以下员工\n- **salary > 10000**: 找到高薪员工(如David $12000$, Amy $12000$)\n\n> 通俗理解：就像在人群中按年龄或收入划分群体","x":600,"y":850,"width":450,"height":400,"color":"3"},
		{"id":"b75aba8aaad4eab1","x":-550,"y":-320,"width":600,"height":460,"type":"file","file":"00-Obsidian/附件/Pasted image 20250609104951.png"}
	],
	"edges":[
		{"id":"edge1","fromNode":"title","fromSide":"bottom","toNode":"why_mysql","toSide":"right","color":"1"},
		{"id":"edge2","fromNode":"why_mysql","fromSide":"right","toNode":"select_syntax","toSide":"left","color":"2"},
		{"id":"edge3","fromNode":"select_syntax","fromSide":"right","toNode":"where_importance","toSide":"left","color":"3"},
		{"id":"edge4","fromNode":"where_importance","fromSide":"left","toNode":"table_creation","toSide":"right","color":"4"},
		{"id":"edge5","fromNode":"table_creation","fromSide":"right","toNode":"batch_insert","toSide":"left","color":"5"},
		{"id":"edge6","fromNode":"batch_insert","fromSide":"right","toNode":"field_selection","toSide":"left","color":"6"},
		{"id":"edge7","fromNode":"field_selection","fromSide":"left","toNode":"where_operators","toSide":"right","color":"1"},
		{"id":"edge8","fromNode":"where_operators","fromSide":"right","toNode":"comparison_examples","toSide":"left","color":"2"},
		{"id":"edge9","fromNode":"comparison_examples","fromSide":"right","toNode":"between_and","toSide":"left","color":"3"},
		{"id":"edge10","fromNode":"between_and","fromSide":"left","toNode":"in_operator","toSide":"right","color":"4"},
		{"id":"edge11","fromNode":"in_operator","fromSide":"right","toNode":"real_world_applications","toSide":"left","color":"5"},
		{"id":"edge12","fromNode":"real_world_applications","fromSide":"right","toNode":"performance_tips","toSide":"left","color":"6"},
		{"id":"edge13","fromNode":"performance_tips","fromSide":"left","toNode":"summary_next","toSide":"top","color":"1"},
		{"id":"edge14","fromNode":"where_importance","fromSide":"bottom","toNode":"real_world_applications","toSide":"top","color":"4"},
		{"id":"edge15","fromNode":"select_syntax","fromSide":"bottom","toNode":"where_operators","toSide":"top","color":"2"},
		{"id":"a8ac1f47a9b06714","fromNode":"b75aba8aaad4eab1","fromSide":"right","toNode":"title","toSide":"left"}
	]
}
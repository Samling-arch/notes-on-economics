{
	"nodes":[
		{"id":"title","type":"text","text":"# MySQL从基础到进阶：数据表操作与数据类型\n\n**第四节** | 苑昊老师 | 2024-12-18\n\n[视频链接](https://www.bilibili.com/video/BV1mxrfYsEyP/)","x":400,"y":-100,"width":600,"height":120},
		{"id":"boolean_type","type":"text","text":"## 布尔类型的特殊处理\n\n### MySQL的布尔类型问题\n- MySQL识别BOOLEAN/BOOL关键字\n- 但**没有真正的true/false值**\n- 实际使用数字0和1代替\n\n### 三种实现方式\n```sql\n-- 方式1：直接声明布尔\nis_active BOOLEAN\n\n-- 方式2：使用微型整数\nis_vip TINYINT\n\n-- 方式3：使用字符串\nstatus VARCHAR(1)\n```\n\n### 约定规则\n- **0 代表 FALSE**\n- **1 代表 TRUE** \n- 非0值都视为TRUE\n\n### 最佳实践\n```sql\nis_deleted TINYINT DEFAULT 0\n```\n\n**通俗理解**：MySQL的布尔类型是个\"假布尔\"，实际还是用数字0和1。","x":1000,"y":450,"width":350,"height":300},
		{"id":"summary","type":"text","text":"## 核心要点总结\n\n### 使用频率排序\n1. **VARCHAR** - 字符串之王 ⭐⭐⭐⭐⭐\n2. **INT/BIGINT** - 整数主力 ⭐⭐⭐⭐⭐  \n3. **DATETIME** - 时间记录 ⭐⭐⭐⭐⭐\n4. **DECIMAL** - 精确数值 ⭐⭐⭐⭐\n5. **ENUM** - 固定选项 ⭐⭐⭐\n\n### 记忆口诀\n- **文字用VARCHAR，数字用INT**\n- **时间用DATETIME，金额用DECIMAL**  \n- **布尔用BIT，选项用ENUM**\n- **大文件用BLOB，小整数用TINY**\n\n### 下节预告\n- 数据表的创建操作\n- 字段约束的详细讲解\n- 实际建表练习\n\n**通俗理解**：掌握了数据类型，就掌握了数据库设计的基础。","x":400,"y":1720,"width":500,"height":250},
		{"id":"type_selection","type":"text","text":"## 数据类型选择策略\n\n### 常用字段类型推荐\n```sql\n-- 用户表示例\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    gender ENUM('男','女','其他'),\n    age TINYINT UNSIGNED,\n    birthday DATE,\n    salary DECIMAL(10,2),\n    is_active BIT(1),\n    created_at DATETIME\n);\n```\n\n### 选择原则\n1. **够用就好**：不要过度设计\n2. **节省空间**：选择合适大小的类型\n3. **便于查询**：考虑后续操作需求\n4. **业务匹配**：符合实际业务场景\n\n### 性能考虑\n- 年龄用TINYINT而不是INT\n- 金额用DECIMAL而不是FLOAT\n- 状态用ENUM而不是VARCHAR\n\n**通俗理解**：选择数据类型就像买衣服，合身最重要。","x":450,"y":1340,"width":400,"height":300},
		{"id":"bit_type","type":"text","text":"## BIT类型 - 比特位的巧妙应用\n\n### 什么是BIT类型？\n```sql\nis_active BIT(1)\n```\n- **存储范围**：只能存储0或1\n- **存储空间**：1个比特位（最小单位）\n- **对比其他类型**：\n  - TINYINT：1字节 = 8比特位\n  - VARCHAR(1)：更多空间\n  - BIT(1)：仅1比特位\n\n### 布尔值的最佳实现\n```sql\n-- 三种布尔实现对比\nis_vip BIT(1)        -- 只能存0或1\nis_active TINYINT    -- 能存0-255\nstatus VARCHAR(1)    -- 能存任意字符\n```\n\n### 优势特点\n- **空间最小**：节省存储空间\n- **限制最严**：只能是0或1\n- **语义清晰**：专门用于布尔值\n\n**通俗理解**：BIT就像最小的开关，只有开(1)和关(0)两种状态。","x":-20,"y":1340,"width":400,"height":300},
		{"id":"practical_examples","type":"text","text":"## 实际应用案例\n\n### 学生表设计\n```sql\nCREATE TABLE students (\n    student_id VARCHAR(20),    -- 学号\n    name VARCHAR(50),          -- 姓名\n    gender ENUM('男','女'),    -- 性别\n    age TINYINT UNSIGNED,      -- 年龄\n    birthday DATE,             -- 生日\n    grade DECIMAL(4,2),        -- 成绩(100.00)\n    is_graduate BIT(1),        -- 是否毕业\n    created_at DATETIME        -- 创建时间\n);\n```\n\n### 电商商品表\n```sql\nCREATE TABLE products (\n    id BIGINT PRIMARY KEY,\n    title VARCHAR(200),\n    price DECIMAL(10,2),\n    stock INT UNSIGNED,\n    category ENUM('电子','服装','图书'),\n    description TEXT,\n    image MEDIUMBLOB\n);\n```\n\n**通俗理解**：好的表设计就像精心规划的房间，每样东西都有合适的位置。","x":1020,"y":1340,"width":350,"height":300},
		{"id":"string_types","type":"text","text":"## 字符串类型详解\n\n### 1. CHAR(n) - 固定长度\n```sql\nCHAR(3)  -- 固定3个字符\n```\n- 长度固定，不足补空格\n- 适用场景：身份证号、手机号等\n- **缺点**：浪费存储空间\n\n### 2. VARCHAR(n) - 可变长度 ⭐\n```sql\nVARCHAR(25)  -- 最大25个字符\n```\n- **使用频率最高**的字符串类型\n- 根据实际内容调整长度\n- 适用场景：姓名、地址等\n\n### 3. TEXT系列 - 大文本\n- TINYTEXT：小文本\n- TEXT：中等文本\n- MEDIUMTEXT：大文本  \n- LONGTEXT：超大文本\n- 适用场景：文章内容、简介等\n\n**通俗理解**：VARCHAR就像弹性袋子，TEXT像超大仓库。","x":1040,"y":65,"width":400,"height":350},
		{"id":"why_datatypes","type":"text","text":"## 为什么需要数据类型？\n\n### Excel的问题\n- 在Excel中可以随意填写任何内容\n- 学号字段可以写汉字、字母、特殊符号\n- 没有任何限制和约束\n\n### 数据库的解决方案\n1. **字段类型**：限制数据的基本类型\n2. **约束条件**：进一步限制数据规则\n   - 唯一约束：不能重复\n   - 非空约束：不能为空\n\n### 实际意义\n- 保证数据的准确性和一致性\n- 便于数据查询和处理\n- 提高存储效率\n\n**通俗理解**：就像给每个盒子贴标签，规定里面只能放什么东西。","x":500,"y":65,"width":400,"height":280},
		{"id":"float_types","type":"text","text":"## 浮点数类型详解\n\n### 三种浮点类型\n1. **FLOAT**：单精度（精度较低）\n2. **DOUBLE**：双精度（推荐使用）\n3. **DECIMAL**：定点数（最精确，推荐）\n\n### 精度参数详解\n```sql\nprice DOUBLE(5,2)\n```\n- **参数含义**：\n  - 第一个数字(5)：总位数\n  - 第二个数字(2)：小数位数\n- **存储范围**：999.99\n- **超出范围**：报错\n\n### 实际应用\n```sql\n-- 商品价格\nprice DECIMAL(10,2)  -- 99999999.99\n\n-- 重量\nweight DOUBLE(6,3)   -- 999.999\n```\n\n**通俗理解**：浮点数就像带小数点的数字，要提前说好总共几位数，小数点后几位。","x":25,"y":820,"width":400,"height":300},
		{"id":"date_types","type":"text","text":"## 日期时间类型详解\n\n### 主要类型对比\n| 类型           | 格式                  | 适用场景      | 使用频率  |\n| ------------ | ------------------- | --------- | ----- |\n| **DATE**     | YYYY-MM-DD          | 生日、入学日期   | ⭐⭐⭐⭐  |\n| **DATETIME** | YYYY-MM-DD HH:MM:SS | 创建时间、支付时间 | ⭐⭐⭐⭐⭐ |\n| TIMESTAMP    | 时间戳                 | 系统记录      | ⭐⭐⭐   |\n| TIME         | HH:MM:SS            | 单纯时间      | ⭐     |\n| YEAR         | YYYY                | 年份        | ⭐     |\n\n### 为什么不用字符串存日期？\n```sql\n-- 错误方式\nbirthday VARCHAR(20) -- '1990-03-16'\n\n-- 正确方式  \nbirthday DATE        -- 1990-03-16\n```\n\n### 优势对比\n- **查询方便**：找2000年前出生的学生\n- **计算简单**：计算年龄、时间差\n- **格式统一**：避免格式混乱\n\n**通俗理解**：专门的日期类型就像专业的日历，比字符串更好用。","x":520,"y":820,"width":400,"height":350},
		{"id":"binary_types","type":"text","text":"## 二进制类型详解\n\n### 基础二进制类型\n```sql\n-- 固定长度二进制\nBINARY(n)\n\n-- 可变长度二进制\nVARBINARY(n)\n```\n- 类似于CHAR和VARCHAR的关系\n- 存储字节数据而非字符数据\n\n### BLOB系列 - 大二进制对象\n| 类型         | 最大存储  | 适用场景 |\n| ---------- | ----- | ---- |\n| TINYBLOB   | 255字节 | 小图标  |\n| BLOB       | 65KB  | 普通图片 |\n| MEDIUMBLOB | 16MB  | 高清图片 |\n| LONGBLOB   | 4GB   | 视频文件 |\n\n### 实际应用\n```sql\n-- 存储头像图片\navatar MEDIUMBLOB\n\n-- 存储文档文件\ndocument LONGBLOB\n```\n\n**通俗理解**：二进制类型专门存储图片、音频、视频等文件数据。","x":1000,"y":820,"width":350,"height":300},
		{"id":"overview","type":"text","text":"## 课程概览\n\n### 核心概念\n- **数据库 = 文件夹**\n- **数据表 = Excel文件**\n- **字段 = 表格列名**\n- **记录 = 表格行数据**\n\n### 学习重点\n- 数据类型的重要性\n- 为什么需要类型约束？\n- Excel vs 数据库的区别\n\n**通俗理解**：数据库就像一个严格的Excel，每个格子都有规定只能放什么类型的数据。","x":50,"y":80,"width":350,"height":250},
		{"id":"enum_set","type":"text","text":"## 枚举与集合类型\n\n### ENUM - 枚举类型（单选）\n```sql\n性别 ENUM('男', '女', '保密')\n```\n- 只能从预设值中选择一个\n- 插入其他值会报错或返回空值\n- 适用场景：性别、状态等固定选项\n\n### SET - 集合类型（多选）\n```sql\n爱好 SET('音乐', '运动', '阅读')\n```\n- 可以选择多个预设值\n- 存储格式：'音乐,运动'\n- 使用场景较少\n\n### 实际应用\n- 性别字段：`ENUM('男', '女', '其他')`\n- 比直接用VARCHAR更安全\n- 避免输入错误数据\n\n**通俗理解**：ENUM像单选题，SET像多选题，都有固定的选项。","x":50,"y":400,"width":350,"height":350},
		{"id":"integer_types","type":"text","text":"## 整数类型详解\n\n### 类型对比表\n| 类型        | 字节数 | 有符号范围        | 无符号范围   |\n| --------- | --- | ------------ | ------- |\n| TINYINT   | 1   | -128~127     | 0~255   |\n| SMALLINT  | 2   | -32768~32767 | 0~65535 |\n| MEDIUMINT | 3   | 约±800万       | 0~1600万 |\n| **INT**   | 4   | 约±21亿        | 0~42亿   |\n| BIGINT    | 8   | 超大范围         | 超大范围    |\n\n### 选择策略\n- **年龄**：TINYINT足够 (0~255)\n- **ID主键**：INT或BIGINT\n- **金额**：建议用DECIMAL\n\n### 有符号 vs 无符号\n```sql\nage TINYINT UNSIGNED  -- 无符号，0~255\nbalance INT           -- 有符号，可为负\n```\n\n**通俗理解**：根据数据大小选合适的盒子，小数据用小盒子节省空间。","x":540,"y":400,"width":400,"height":350}
	],
	"edges":[
		{"id":"edge1","fromNode":"title","fromSide":"bottom","toNode":"overview","toSide":"right","color":"4"},
		{"id":"edge2","fromNode":"overview","fromSide":"right","toNode":"why_datatypes","toSide":"left","color":"4"},
		{"id":"edge3","fromNode":"why_datatypes","fromSide":"right","toNode":"string_types","toSide":"left","color":"2"},
		{"id":"edge4","fromNode":"string_types","fromSide":"left","toNode":"enum_set","toSide":"right","color":"2"},
		{"id":"edge5","fromNode":"why_datatypes","fromSide":"bottom","toNode":"integer_types","toSide":"top","color":"3"},
		{"id":"edge6","fromNode":"integer_types","fromSide":"right","toNode":"boolean_type","toSide":"left","color":"3"},
		{"id":"edge7","fromNode":"boolean_type","fromSide":"left","toNode":"bit_type","toSide":"top","color":"3"},
		{"id":"edge8","fromNode":"integer_types","fromSide":"left","toNode":"float_types","toSide":"top","color":"5"},
		{"id":"edge9","fromNode":"why_datatypes","fromSide":"bottom","toNode":"date_types","toSide":"top","color":"6"},
		{"id":"edge10","fromNode":"string_types","fromSide":"bottom","toNode":"binary_types","toSide":"top","color":"2"},
		{"id":"edge11","fromNode":"float_types","fromSide":"bottom","toNode":"type_selection","toSide":"top","color":"1"},
		{"id":"edge12","fromNode":"date_types","fromSide":"bottom","toNode":"type_selection","toSide":"top","color":"1"},
		{"id":"edge13","fromNode":"binary_types","fromSide":"bottom","toNode":"practical_examples","toSide":"top","color":"1"},
		{"id":"edge14","fromNode":"bit_type","fromSide":"right","toNode":"practical_examples","toSide":"left","color":"1"},
		{"id":"edge15","fromNode":"type_selection","fromSide":"bottom","toNode":"summary","toSide":"top","color":"1"},
		{"id":"edge16","fromNode":"practical_examples","fromSide":"left","toNode":"summary","toSide":"top","color":"1"}
	]
}
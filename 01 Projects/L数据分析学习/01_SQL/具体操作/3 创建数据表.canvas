{
	"nodes":[
		{"id":"basic_syntax","type":"text","text":"## CREATE TABLE 基础语法\n\n### 核心语法结构\n```sql\nCREATE TABLE table_name (\n    字段名1 类型1 [约束1],\n    字段名2 类型2 [约束2],\n    ...\n    字段名n 类型n [约束n]\n) CHARACTER SET 编码;\n```\n\n### 语法要素详解\n- **CREATE TABLE**: 两个关键字，告诉MySQL要创建表\n- **table_name**: 表名，自己定义的标识符\n- **小括号**: 包裹所有字段定义\n- **字段定义**: 字段名 + 数据类型 + 可选约束\n- **逗号分隔**: 多个字段用逗号分开，最后一个不加逗号\n- **CHARACTER SET**: 可选的编码设置\n\n> **通俗理解**：就像在Excel中创建表格，但需要预先定义每一列能存什么类型的数据","x":100,"y":50,"width":450,"height":430,"color":"2"},
		{"id":"field_concept","type":"text","text":"## 字段概念深度解析\n\n### 什么是字段？\n- **字段** = Excel表格中的**列**\n- 每个字段有**名称**和**数据类型**\n- 类似于表单中的输入框标签\n\n### 字段 vs 记录\n- **字段**：表结构的一部分（列）\n- **记录**：表中的具体数据（行）\n- 先有表结构，后有数据记录\n\n### 字段命名规范\n- 使用英文单词（如：name, age, gender）\n- 见名知意，便于理解\n- 避免使用MySQL关键字\n\n### 必备信息\n- **字段名**：必需\n- **数据类型**：必需\n- **约束条件**：可选\n\n> **通俗理解**：字段就是数据的\"容器标签\"，规定了这个位置能放什么样的数据","x":650,"y":50,"width":410,"height":430,"color":"3"},
		{"id":"type_constraints","type":"text","text":"## 类型约束的作用机制\n\n### 约束的本质\n数据类型和约束都是**限制工具**，确保数据质量\n\n### 类型限制示例\n\n#### INT类型限制\n```sql\nstudent_id INT\n```\n- ✅ 插入：12345（整数）\n- ❌ 插入：\"abc\"（字符串）→ 报错\n- ❌ 插入：99.5（小数）→ 报错\n\n#### BIT类型限制\n```sql\ngender BIT(1)\n```\n- ✅ 插入：0（代表女）\n- ✅ 插入：1（代表男）\n- ❌ 插入：2→ 报错\n- ❌ 插入：\"male\"→ 报错\n\n#### DECIMAL类型限制\n```sql\ngpa DECIMAL(4,2)\n```\n- ✅ 插入：99.99\n- ✅ 插入：0.00\n- ❌ 插入：100.00→ 报错（超过总位数）\n- ❌ 插入：99.999→ 报错（小数位过多）\n\n### 约束的价值\n- **数据完整性**：防止错误数据\n- **存储优化**：节省空间\n- **查询效率**：提高性能\n\n> **通俗理解**：类型约束就像\"门卫\"，只让符合条件的数据进入数据库","x":100,"y":550,"width":450,"height":400,"color":"5"},
		{"id":"practical_example","type":"text","text":"## 学生表创建实战案例\n\n### 完整SQL语句\n```sql\nCREATE TABLE student (\n    name VARCHAR(32),        -- 姓名：字符串，最多32字符\n    gender BIT(1),          -- 性别：0/1，女/男\n    age INT,                -- 年龄：整数\n    birth DATE,             -- 生日：日期格式\n    gpa DECIMAL(4,2)        -- 平均绩点：小数，最大99.99\n) CHARACTER SET utf8mb4;\n```\n\n### 字段设计思路\n\n#### 1. 姓名字段 (name)\n- **类型选择**：VARCHAR(32)\n- **原因**：姓名是文本，长度不固定\n- **容量**：32个字符足够存储中英文姓名\n\n#### 2. 性别字段 (gender)\n- **类型选择**：BIT(1)\n- **原因**：只有两种选择，限制最严格\n- **编码**：0=女，1=男（自定义约定）\n- **替代方案**：\n  - `CHAR(1)`：存储'M'/'F'\n  - `INT`：存储0/1，但可能存储其他值\n\n#### 3. 年龄字段 (age)\n- **类型选择**：INT\n- **原因**：年龄是整数\n- **优化**：可用TINYINT节省空间\n\n#### 4. 生日字段 (birth)\n- **类型选择**：DATE\n- **原因**：只需年月日，不需要时分秒\n- **格式**：'YYYY-MM-DD'\n\n#### 5. 绩点字段 (gpa)\n- **类型选择**：DECIMAL(4,2)\n- **原因**：需要精确的小数计算\n- **范围**：0.00 到 99.99\n- **用途**：演示浮点数类型使用\n\n> **通俗理解**：根据实际业务需求选择最合适的数据类型，就像为不同物品选择合适的容器","x":650,"y":550,"width":500,"height":500,"color":"6"},
		{"id":"character_set","type":"text","text":"## 字符编码设置详解\n\n### CHARACTER SET的作用\n```sql\nCHARACTER SET utf8mb4\n```\n\n### 编码继承机制\n1. **表级编码**：在CREATE TABLE中指定\n2. **数据库级编码**：如果表未指定，继承数据库编码\n3. **系统级编码**：MySQL默认编码\n\n### 常用编码类型\n- **utf8mb4**：完整UTF-8支持，推荐使用\n- **utf8**：基础UTF-8支持\n- **latin1**：单字节编码\n- **gbk**：中文编码\n\n### 选择建议\n- **国际化项目**：使用utf8mb4\n- **纯中文项目**：可使用gbk\n- **保持一致**：表编码与数据库编码一致\n\n### 不设置的后果\n- 中文字符可能显示乱码\n- 数据存储不正确\n- 查询结果异常\n\n> **通俗理解**：字符编码就像\"翻译器\"，告诉数据库如何正确理解和存储文字","x":1250,"y":550,"width":400,"height":350,"color":"7"},
		{"id":"syntax_flexibility","type":"text","text":"## SQL语法的灵活性\n\n### 格式自由度\n```sql\n-- 多行格式（推荐）\nCREATE TABLE student (\n    name VARCHAR(32),\n    age INT\n);\n\n-- 单行格式（可行但不推荐）\nCREATE TABLE student (name VARCHAR(32), age INT);\n```\n\n### 空格和换行\n- **空格**：多个或少个空格都可以\n- **换行**：可以任意换行\n- **缩进**：不是必需的，但提高可读性\n\n### 语法要求\n- **关键字正确**：CREATE、TABLE等\n- **标点符号**：逗号、分号、括号正确\n- **拼写准确**：字段名、类型名无误\n\n### 最佳实践\n- 使用多行格式\n- 适当缩进对齐\n- 添加注释说明\n- 保持风格一致\n\n> **通俗理解**：SQL就像写作文，只要语法正确，格式可以很灵活","x":100,"y":1050,"width":450,"height":300,"color":"8"},
		{"id":"execution_environment","type":"text","text":"## 执行环境准备\n\n### 必须先选择数据库\n```sql\n-- 错误示例：未选择数据库\nCREATE TABLE student (name VARCHAR(32));\n-- 错误信息：No database selected\n```\n\n### 正确的执行步骤\n\n#### 1. 连接MySQL\n```bash\nmysql -u root -p\n# 输入密码\n```\n\n#### 2. 查看现有数据库\n```sql\nSHOW DATABASES;\n```\n\n#### 3. 创建新数据库（如需要）\n```sql\nCREATE DATABASE db_day01;\n```\n\n#### 4. 选择数据库\n```sql\nUSE db_day01;\n```\n\n#### 5. 确认当前数据库\n```sql\nSELECT DATABASE();\n```\n\n#### 6. 执行建表语句\n```sql\nCREATE TABLE student (\n    name VARCHAR(32),\n    age INT\n);\n```\n\n#### 7. 验证表创建\n```sql\nSHOW TABLES;  -- 查看所有表\n```\n\n### 常见错误\n- 忘记USE数据库\n- 数据库名拼写错误\n- 权限不足\n\n> **通俗理解**：创建表就像在文件夹里新建文件，必须先进入正确的文件夹","x":650,"y":1050,"width":500,"height":400,"color":"9"},
		{"id":"development_tools","type":"text","text":"## 开发工具使用技巧\n\n### 为什么使用SQL文件？\n- **代码保存**：避免终端中代码丢失\n- **便于复习**：可以反复查看和修改\n- **团队协作**：文件可以共享\n- **版本控制**：可以追踪修改历史\n\n### PyCharm中创建SQL文件\n1. 创建文本文件\n2. 命名为 `*.sql`（如：01_创建数据库表.sql）\n3. PyCharm自动识别SQL语法\n4. 提供语法高亮和代码提示\n\n### 开发流程\n1. **编写**：在SQL文件中编写代码\n2. **测试**：复制到MySQL终端执行\n3. **调试**：根据错误修改代码\n4. **保存**：确认无误后保存文件\n\n### 注意事项\n- 文件必须以`.sql`结尾\n- 使用UTF-8编码保存\n- 添加注释便于理解\n\n> **通俗理解**：使用专业工具写代码，就像用Word写文档一样，更高效更安全","x":1250,"y":1050,"width":400,"height":350,"color":"10"},
		{"id":"business_logic","type":"text","text":"## 业务逻辑驱动的表设计\n\n### 设计原则\n**数据库设计是项目开发的第一步**\n\n### 设计流程\n1. **需求分析**：明确要存储什么数据\n2. **字段确定**：根据业务需求选择字段\n3. **类型选择**：为每个字段选择合适的数据类型\n4. **关系设计**：确定表与表之间的关系\n\n### 实际案例\n\n#### 客户关系管理系统 (CRM)\n```sql\nCREATE TABLE customer (\n    customer_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    age INT,\n    phone VARCHAR(20),\n    address VARCHAR(200),\n    registration_date DATE\n);\n```\n**核心数据**：客户信息\n\n#### 学生信息管理系统\n```sql\nCREATE TABLE student (\n    student_id VARCHAR(20) PRIMARY KEY,\n    name VARCHAR(32),\n    class_name VARCHAR(20),\n    grade INT,\n    enrollment_date DATE\n);\n```\n**核心数据**：学生信息\n\n### 字段选择策略\n- **必需字段**：业务核心数据\n- **有用字段**：可能用到的辅助数据\n- **避免冗余**：不存储无价值数据\n- **考虑扩展**：为未来需求预留空间\n\n### 设计误区\n- ❌ 存储所有可能的字段\n- ❌ 忽视业务实际需求\n- ❌ 盲目追求完美\n- ✅ 根据实际业务需求设计\n\n> **通俗理解**：表设计要像量体裁衣，根据实际需要来，不多不少刚刚好","x":100,"y":1450,"width":550,"height":400,"color":"11"},
		{"id":"verification_commands","type":"text","text":"## 验证和查看命令\n\n### 基础查看命令\n\n#### 1. 查看当前数据库\n```sql\nSELECT DATABASE();\n```\n显示当前正在使用的数据库名\n\n#### 2. 查看所有数据库\n```sql\nSHOW DATABASES;\n```\n列出MySQL中所有数据库\n\n#### 3. 查看当前数据库的所有表\n```sql\nSHOW TABLES;\n```\n显示当前数据库中的所有表名\n\n#### 4. 查看表结构\n```sql\nDESC student;\n-- 或者\nDESCRIBE student;\n-- 或者\nSHOW COLUMNS FROM student;\n```\n显示表的字段信息、类型、约束等\n\n#### 5. 查看建表语句\n```sql\nSHOW CREATE TABLE student;\n```\n显示创建该表的完整SQL语句\n\n### 验证流程\n1. 确认数据库连接\n2. 选择正确数据库\n3. 执行建表语句\n4. 验证表是否创建成功\n5. 检查表结构是否正确\n\n> **通俗理解**：验证就像检查作业，确保每一步都做对了","x":1300,"y":1450,"width":400,"height":350,"color":"13"},
		{"id":"common_mistakes","type":"text","text":"## 常见错误及解决方案\n\n### 语法错误\n\n#### 1. 逗号错误\n```sql\n-- ❌ 错误：最后一个字段后加逗号\nCREATE TABLE student (\n    name VARCHAR(32),\n    age INT,  -- 多余的逗号\n);\n\n-- ✅ 正确：最后一个字段不加逗号\nCREATE TABLE student (\n    name VARCHAR(32),\n    age INT\n);\n```\n\n#### 2. 分号遗漏\n```sql\n-- ❌ 错误：缺少分号\nCREATE TABLE student (name VARCHAR(32))\n\n-- ✅ 正确：语句结尾加分号\nCREATE TABLE student (name VARCHAR(32));\n```\n\n#### 3. 括号不匹配\n```sql\n-- ❌ 错误：括号不配对\nCREATE TABLE student (\n    name VARCHAR(32\n);\n\n-- ✅ 正确：括号配对\nCREATE TABLE student (\n    name VARCHAR(32)\n);\n```\n\n### 逻辑错误\n\n#### 1. 数据库未选择\n```sql\n-- 错误信息：No database selected\n-- 解决方案：USE database_name;\n```\n\n#### 2. 表已存在\n```sql\n-- 错误信息：Table 'student' already exists\n-- 解决方案：DROP TABLE student; 或使用不同表名\n```\n\n#### 3. 权限不足\n```sql\n-- 错误信息：Access denied\n-- 解决方案：使用有权限的用户账号\n```\n\n### 调试技巧\n- 仔细阅读错误信息\n- 检查语法格式\n- 验证数据库连接\n- 逐步测试代码\n\n> **通俗理解**：写代码就像写作文，语法要正确，逻辑要清晰，多练习就能避免错误","x":720,"y":1450,"width":450,"height":400,"color":"12"},
		{"id":"summary_key_points","type":"text","text":"## 核心要点总结\n\n### 1. 建表三要素\n- **表名**：唯一标识符\n- **字段**：数据存储的基本单元\n- **类型**：数据格式和约束规则\n\n### 2. 语法格式\n```sql\nCREATE TABLE 表名 (\n    字段名1 类型1 [约束],\n    字段名2 类型2 [约束],\n    ...\n) [CHARACTER SET 编码];\n```\n\n### 3. 执行前提\n- 必须连接到MySQL\n- 必须选择目标数据库\n- 必须具有相应权限\n\n### 4. 设计原则\n- 基于业务需求\n- 选择合适的数据类型\n- 考虑存储效率\n- 保持字段命名规范\n\n### 5. 常用数据类型\n- **VARCHAR(n)**：变长字符串\n- **INT**：整数\n- **BIT(1)**：布尔值\n- **DATE**：日期\n- **DECIMAL(M,D)**：精确小数\n\n### 6. 验证方法\n- `SHOW TABLES;`：查看所有表\n- `DESC 表名;`：查看表结构\n- `SELECT DATABASE();`：确认当前数据库\n\n> **通俗理解**：掌握这些要点，就能熟练创建任何数据库表了","x":570,"y":1960,"width":600,"height":400,"color":"14"},
		{"id":"data_types","type":"text","text":"## 数据类型详细说明\n\n### 字符串类型\n- **VARCHAR(n)**: 可变长度字符串\n  - `n` 表示最大字符数（不是字节数）\n  - 示例：`VARCHAR(32)` 最多存32个字符\n  - 汉字\"苑\"占1个字符，3个字节\n\n### 数值类型\n- **INT**: 整数类型\n  - 范围：约-21亿到+21亿\n  - 适用于：学号、年龄等\n- **TINYINT**: 小整数\n  - 范围：-128到127\n  - 节省存储空间\n\n### 布尔类型\n- **BIT(1)**: 位类型\n  - 只能存储 0 或 1\n  - 适用于：性别、是否等二选一场景\n  - 比INT限制更严格\n\n### 浮点类型\n- **DECIMAL(M,D)**: 精确小数\n  - M：总位数\n  - D：小数位数\n  - 示例：`DECIMAL(4,2)` 最大值99.99\n- **FLOAT**: 单精度浮点\n- **DOUBLE**: 双精度浮点\n\n### 日期时间类型\n- **DATE**: 日期（年-月-日）\n- **DATETIME**: 日期时间（年-月-日 时:分:秒）\n- **TIME**: 时间（时:分:秒）\n\n> **通俗理解**：数据类型就像\"筛子\"，只允许符合规格的数据通过","x":1150,"y":15,"width":500,"height":500,"color":"4"},
		{"id":"title","type":"text","text":"# MySQL从基础到进阶：数据库表操作完整指南\n\n**第二章：创建数据表** | 苑昊老师 | 2024-12-18\n\n[视频链接](https://www.bilibili.com/video/BV1mxrfYsEyP/)\n\n> **一句话概括**：学会用一条SQL指令创建数据库表，掌握字段、类型、约束的核心概念","x":550,"y":-355,"width":800,"height":150,"color":"1"},
		{"id":"2bc5fefe163c0a3f","x":180,"y":-480,"width":248,"height":400,"color":"3","type":"file","file":"00-Obsidian/附件/Pasted image 20250608201009.png"}
	],
	"edges":[
		{"id":"edge1","fromNode":"title","fromSide":"bottom","toNode":"basic_syntax","toSide":"right","color":"2"},
		{"id":"edge2","fromNode":"basic_syntax","fromSide":"right","toNode":"field_concept","toSide":"left","color":"3"},
		{"id":"edge3","fromNode":"field_concept","fromSide":"right","toNode":"data_types","toSide":"left","color":"4"},
		{"id":"edge4","fromNode":"data_types","fromSide":"left","toNode":"type_constraints","toSide":"right","color":"5"},
		{"id":"edge5","fromNode":"type_constraints","fromSide":"right","toNode":"practical_example","toSide":"left","color":"6"},
		{"id":"edge6","fromNode":"practical_example","fromSide":"right","toNode":"character_set","toSide":"left","color":"7"},
		{"id":"edge7","fromNode":"basic_syntax","fromSide":"bottom","toNode":"syntax_flexibility","toSide":"top","color":"8"},
		{"id":"edge8","fromNode":"syntax_flexibility","fromSide":"right","toNode":"execution_environment","toSide":"left","color":"9"},
		{"id":"edge9","fromNode":"execution_environment","fromSide":"right","toNode":"development_tools","toSide":"left","color":"10"},
		{"id":"edge10","fromNode":"practical_example","fromSide":"bottom","toNode":"business_logic","toSide":"top","color":"11"},
		{"id":"edge11","fromNode":"execution_environment","fromSide":"bottom","toNode":"common_mistakes","toSide":"top","color":"12"},
		{"id":"edge12","fromNode":"common_mistakes","fromSide":"right","toNode":"verification_commands","toSide":"left","color":"13"},
		{"id":"edge13","fromNode":"verification_commands","fromSide":"left","toNode":"summary_key_points","toSide":"right","color":"14"},
		{"id":"edge14","fromNode":"business_logic","fromSide":"bottom","toNode":"summary_key_points","toSide":"top","color":"14"},
		{"id":"edge15","fromNode":"character_set","fromSide":"bottom","toNode":"summary_key_points","toSide":"top","color":"14"},
		{"id":"529035a5b11595a3","fromNode":"2bc5fefe163c0a3f","fromSide":"right","toNode":"title","toSide":"left"}
	]
}
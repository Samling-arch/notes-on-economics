{
	"nodes":[
		{"id":"title","type":"text","x":400,"y":-100,"width":600,"height":120,"text":"# 金九银十数据分析：SQL实战教学\n\n**第三集（上）：手写SQL教学（简单篇）**\n\n讲师：渭河 | 2022-02-10\n\n[视频链接](https://www.bilibili.com/video/BV1xm4y1Z7x3)"},
		{"id":"intro","type":"text","x":100,"y":100,"width":350,"height":280,"text":"## 课程核心目标\n\n# 真实还原工作场景\n- 需求方现场提需求\n- 即时编写SQL代码\n- 解决\"偷懒\"误解\n\n# 掌握核心能力\n1. 熟练编写Hive SQL\n2. 处理复杂业务需求\n3. 建立指标体系思维\n\n# 通俗概括：\n> 像真正数据分析师一样思考和工作"},
		{"id":"dataset","type":"text","x":500,"y":100,"width":350,"height":250,"text":"## 数据表结构设计\n\n### 基础表（网络题改编）\n- 学生表：`student(sid, sname)`\n- 课程表：`course(cid, cname)`\n- 教师表：`teacher(tid, tname)`\n- 成绩表：`score(sid, cid, score)`\n\n### 新增表（真实场景增强）\n- 课程流水表：`class_log(sid, cid, tid, class_time)`\n  - 含时间戳字段\n  - 记录每节课详情\n\n# 通俗概括：\n> 用五张表模拟真实业务数据"},
		{"id":"hive_tips","type":"text","x":900,"y":100,"width":400,"height":300,"text":"## Hive SQL 工作规范\n\n# 效率优化原则\n- **必须添加时间过滤**\n  ```sql\n  WHERE dt='20220201'  -- 限制分区\n  ```\n- 大表$\\leftrightarrow$小表连接顺序\n- 避免`SELECT *`全表扫描\n\n# 开发习惯\n1. 使用表别名：`t1`, `t2`\n2. 明确字段归属：`t1.sid`\n3. 增量表/全量表区分\n\n# 通俗概括：\n> 省时省钱的SQL写法技巧"},
		{"id":"q1_solution1","type":"text","x":100,"y":400,"width":400,"height":250,"text":"## 第一题：课程成绩对比（解法1）\n\n### 需求：\n> 查询01课比02课成绩高的学生信息\n\n```sql\nSELECT \n  t1.sid, \n  t1.score AS score_01,\n  t2.score AS score_02\nFROM \n  (SELECT * FROM score WHERE cid='01') t1\nJOIN\n  (SELECT * FROM score WHERE cid='02') t2\nON t1.sid = t2.sid\nWHERE t1.score > t2.score\n```\n\n# 核心思路：\n> 将同一张表拆成两个虚拟表进行对比"},
		{"id":"q1_solution2","type":"text","x":550,"y":400,"width":400,"height":250,"text":"## 第一题：课程成绩对比（解法2）\n\n### 开窗函数方案\n```sql\nSELECT\n  sid,\n  MAX(CASE WHEN cid='01' THEN score END) AS score_01,\n  MAX(CASE WHEN cid='02' THEN score END) AS score_02\nFROM score\nGROUP BY sid\nHAVING score_01 > score_02\n```\n\n# 开窗函数优势：\n- 避免多次扫描表\n- 灵活处理多条件\n- 代码更简洁\n\n# 通俗概括：\n> 用`CASE`当转换器，`MAX`当收集器"},
		{"id":"q2_solution","type":"text","x":1000,"y":400,"width":350,"height":300,"text":"## 第二题：平均成绩筛选\n\n### 需求：\n> 查询平均分>$60$的学生信息\n\n```sql\nSELECT\n  t2.sid,\n  t2.sname,\n  AVG(t1.score) AS avg_score\nFROM score t1\nLEFT JOIN student t2\n  ON t1.sid = t2.sid\nWHERE t1.dt='20220201'  -- 真实环境必备\nGROUP BY t2.sid, t2.sname\nHAVING AVG(t1.score) > 60\n```\n\n# 聚合函数原理：\n$$\\text{avg\\_score} = \\frac{\\sum\\text{score}}{\\text{课程数量}}$$\n\n# 通俗概括：\n> `GROUP BY`分组后`HAVING`过滤"},
		{"id":"q3_solution","type":"text","x":100,"y":700,"width":400,"height":250,"text":"## 第三题：模糊查询陷阱\n\n### 需求：\n> 查询姓\"李\"的教师数量\n\n### 错误解法：\n```sql\nSELECT COUNT(*)\nFROM teacher \nWHERE tname LIKE '%李%'  -- 会包含\"张李\"\n```\n\n### 正确方案：\n```sql\nSELECT COUNT(*) \nFROM teacher\nWHERE SUBSTR(tname,1,1) = '李'  -- 截取首字\n```\n\n# 通俗概括：\n> 中文字符处理要小心边界"},
		{"id":"q4_solution","type":"text","x":550,"y":700,"width":400,"height":250,"text":"## 第四题：条件排序\n\n### 需求：\n> 检索01课不及格学生并降序排列\n\n```sql\nSELECT\n  t2.sid,\n  t2.sname,\n  t1.score\nFROM score t1\nLEFT JOIN student t2\n  ON t1.sid = t2.sid\nWHERE \n  t1.cid = '01' \n  AND t1.score < 60  -- 不及格条件\nORDER BY t1.score DESC  -- 降序排列\n```\n\n# 排序规则：\n- `ASC`：升序（默认）\n- `DESC`：降序\n\n# 通俗概括：\n> `WHERE`过滤后`ORDER BY`整理队伍"},
		{"id":"q5_solution","type":"text","x":1000,"y":700,"width":350,"height":300,"text":"## 第五题：开窗函数排名\n\n### 需求：\n> 查询各科成绩前三名\n\n```sql\nSELECT\n  cid,\n  sid,\n  score,\n  ROW_NUMBER() OVER (\n    PARTITION BY cid \n    ORDER BY score DESC\n  ) AS rank\nFROM score\nWHERE rank <= 3\n```\n\n### 排名函数区别：\n| 函数 | 同分处理 | 排名示例 |\n|------|----------|----------|\n| `ROW_NUMBER` | 连续编号 | 1,2,3,4 |\n| `RANK` | 并列跳号 | 1,1,3,4 |\n| `DENSE_RANK` | 并列连续 | 1,1,2,3 |\n\n# 通俗概括：\n> `OVER`开窗+`PARTITION`分赛道排名"},
		{"id":"q6_solution","type":"text","x":100,"y":1000,"width":500,"height":350,"text":"## 第六题：综合实战（上课时长）\n\n### 需求：\n> 统计学生各科上课总时长\n\n```sql\nSELECT\n  t1.sid,\n  t3.cname,\n  SUM(\n    UNIX_TIMESTAMP(end_time) - \n    UNIX_TIMESTAMP(start_time) \n  ) AS total_seconds,\n  -- 按学科分类统计\n  SUM(CASE WHEN t3.ctype='理科' \n      THEN UNIX_TIMESTAMP(end_time)-UNIX_TIMESTAMP(start_time)\n    ELSE 0 END) AS science_time\nFROM class_log t1\nJOIN course t3 ON t1.cid = t3.cid\nWHERE t1.dt BETWEEN '20220101' AND '20220131'\nGROUP BY t1.sid, t3.cname\n```\n\n### 时间处理关键：\n1. `UNIX_TIMESTAMP()`：转时间戳\n2. 时间戳差值=秒数\n3. `BETWEEN`：时间范围过滤\n\n# 通俗概括：\n> 时间戳是秒数计算器，`CASE`是分类储物箱"},
		{"id":"timestamp","type":"text","x":650,"y":1000,"width":350,"height":200,"text":"## 时间戳处理秘籍\n\n### 两种时间格式：\n1. 字符串：`2022-01-01 08:00:00`\n2. 时间戳：`1640995200`（秒数）\n\n### 转换方法：\n```sql\n-- 字符串→时间戳\nSELECT UNIX_TIMESTAMP('2022-01-01 08:00:00') \n-- 输出：1640995200\n\n-- 时间戳→字符串\nSELECT FROM_UNIXTIME(1640995200)\n-- 输出：2022-01-01 08:00:00\n```\n\n# 通俗概括：\n> 时间戳是计算机的\"秒表计时器\""},
		{"id":"summary","type":"text","x":1050,"y":1000,"width":300,"height":300,"text":"## 核心技能总结\n\n### 必会函数清单：\n1. 聚合函数：\n   - `AVG()`/`SUM()`\n   - `MAX()`/`MIN()`\n2. 条件判断：\n   - `CASE WHEN`\n3. 开窗函数：\n   - `ROW_NUMBER()`\n   - `RANK()`\n\n### 效率优化原则：\n- 先`WHERE`后`SELECT`\n- 大表连小表\n- 避免全表扫描\n\n# 通俗概括：\n> 写SQL就像组装流水线"}
	],
	"edges":[
		{"id":"e1","fromNode":"title","toNode":"intro","color":"1","fromSide":"bottom","toSide":"right"},
		{"id":"e2","fromNode":"intro","toNode":"dataset","color":"2","fromSide":"right","toSide":"left"},
		{"id":"e3","fromNode":"dataset","toNode":"hive_tips","color":"3","fromSide":"right","toSide":"left"},
		{"id":"e4","fromNode":"hive_tips","toNode":"q1_solution1","color":"4","fromSide":"left","toSide":"right"},
		{"id":"e5","fromNode":"q1_solution1","toNode":"q1_solution2","color":"4","fromSide":"right","toSide":"left"},
		{"id":"e6","fromNode":"q1_solution2","toNode":"q2_solution","color":"1","fromSide":"right","toSide":"left"},
		{"id":"e7","fromNode":"q2_solution","toNode":"q3_solution","color":"2","fromSide":"left","toSide":"right"},
		{"id":"e8","fromNode":"q3_solution","toNode":"q4_solution","color":"3","fromSide":"right","toSide":"left"},
		{"id":"e9","fromNode":"q4_solution","toNode":"q5_solution","color":"4","fromSide":"right","toSide":"left"},
		{"id":"e10","fromNode":"q5_solution","toNode":"q6_solution","color":"1","fromSide":"left","toSide":"right"},
		{"id":"e11","fromNode":"q6_solution","toNode":"timestamp","color":"2","fromSide":"right","toSide":"left"},
		{"id":"e12","fromNode":"timestamp","toNode":"summary","color":"3","fromSide":"right","toSide":"left"},
		{"id":"e13","fromNode":"hive_tips","toNode":"q6_solution","color":"5","label":"时间过滤","fromSide":"bottom","toSide":"top"},
		{"id":"e14","fromNode":"q1_solution2","toNode":"q5_solution","color":"6","label":"开窗函数","fromSide":"bottom","toSide":"left"}
	]
}